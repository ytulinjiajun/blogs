* DONE [#C] theme:FTP服务
  CLOSED: [2017-12-26 二 14:52]
** 安装
--安装vsftpd:
sudo apt install vsftpd

--安装ftp（针对kali）
sudo apt install ftp  
** 基础知识
#(1)FTP传输使用的是TCP数据包协议，TCP/IP协议的运用层
#(2)FTP主要用来进行文件传输，采用的传输方式是明文传输，所以其传输的数据具有一定的危险性
#(3)FTP这个古老的协议有很多的安全危机历史，所有，为了更加安全的使用FTP,我们使用vsftpd，
#   (very secure FTP daemon),其最初发展的基本理念就是构建一个以安全为重心的FTP服务器
#(4)FTP属于TCP/IP协议的运用层，自然服从客户端，服务器的模式，客户端向服务器发起FTP服务
#	请求，这里我们就称客户端为FTP客户端，服务端的FTP服务器
#(5)FTP的连接方式有主动式(Active)，被动式(Passive),默认是主动式

#主动式：
#<1>FTP服务器使用了两个端口来同FTP客户端交互：21号端口，命令通道；20号端口，数据流通道，
#	其中，21号端口是用于接收FTP客户端发起的连接请求以及文件的下载，上传，查询等命令，
#	20号端口则是FTP服务器主动开启的，用于向FTP客户端发送客户端请求的数据
#<2>主动式连接的问题：
#	假设在FTP客户端和FTP服务器之间有一台防火墙，且FTP客户端在防火墙的后面，我们知道
#防火墙就是能够让在其后面的主机能够访问外部网络，而外部网络则无法访问防火墙后面的主机，
#所以主动式连接的问题显而易见了，FTP客户端通过21号端口向FTP服务器发起的连接请求以及
#上传下载请求没有问题，但是FTP服务器主动开启20号端口向位于防火墙后面的FTP客户端回复
#数据时，三次握手是不可能成功的，因为，FTP服务器本质上是通过20号端口向防火墙的NAT
#发起连接请求，而防火墙的NAT又没有监听FTP服务器，所以主动式连接在这种情况下以失败告终，
#	那这个问题如何解决呢，有两种方法，第一种，使用防火墙提供的模块ip_conntrack_ftp,
#以及ip_nat_ftp，用modprobe这个命令来加载，防火墙的这两个模块会去分析21号端口的连接
#信息，就可以得到FTP服务器的资料，这种方法的前提是FTP必须是21号端口；第二种，被动式

	#被动式：被动式的连接是指由FTP客户端向服务器端发起索要数据的请求
** 我的配置
#########################################################################################
#备注：下面一切的配置可以使用man 5 vsftpd.config来查询技术细节
#模块说明：全局配置，匿名配置，本地配置，SSL配置，日志相关
#########################################################################################
##########################################全局配置########################################
#########################################################################################
#YES:vsftpd将会运行在stand alone模式，监听ipv4套接字
#默认：NO
#备注：同listen_ipv6是互相排斥的
listen=YES
#----------------------------------------------------------------------------------------
#YES:同listen,不过，该参数是监听ipv6套接字
#默认：NO
#备注：同listen是互相排斥的
listen_ipv6=NO
#----------------------------------------------------------------------------------------
#系统默认：21
#备注:FTP连接的命令通道（适合stand alone，对super daemon无效）
listen_port=21
#----------------------------------------------------------------------------------------
#YES:允许从端口获得数据连接
#默认：YES
port_enable=YES
#----------------------------------------------------------------------------------------
#YES:主动式Activite连接，FTP服务器向FTP客户端发送数据ftp-data所使用的端口号
#系统默认：NO
connect_from_port_20=YES
ftp_data_port=20
#----------------------------------------------------------------------------------------
#YES:支持被动式连接，一定要设置为YES
#系统默认：YES
pasv_enable=YES
#----------------------------------------------------------------------------------------
#YES:更改文件系统的FPT命令都是被允许的
#默认：NO
#备注：控制是否允许执行更改文件系统的FTP命令，若要允许用户上传数据就得启动该值
write_enable=YES
#----------------------------------------------------------------------------------------
#YES:允许下载请求
#系统默认：YES
download_enable=YES
#----------------------------------------------------------------------------------------
#NO:所有的目录命令将会没有执行权限
#系统默认：YES
dirlist_enable=NO
#----------------------------------------------------------------------------------------
#YES:开启tcp_wrappers支持
#默认：NO
tcp_wrappers=YES
#----------------------------------------------------------------------------------------
#YES:显示目录清单时使用本地时间而不是GMT时间,vsftpd默认使用格林尼治时间，比中国晚8小时
#默认：NO
use_localtime=YES
#----------------------------------------------------------------------------------------
#YES:在目录列表中,所有用户以及用户组的信息都会显示为ftp
#默认：NO
hide_ids=NO
#----------------------------------------------------------------------------------------
#YES:以.开始的文件或目录都会被显示出来
#系统默认：NO
force_dot_files=YES
#----------------------------------------------------------------------------------------
#备注：login时显示欢迎信息,如果设置了banner_file则此设置无效
ftpd_banner=welcome to FTP
#----------------------------------------------------------------------------------------
#备注：指定某个纯文本作为用户登录vsftpd服务器时，所显示的欢迎字段
#banner_file=/etc/banner
#----------------------------------------------------------------------------------------
#YES:vsftpd将会尝试在系统进程列表中显示会话状态信息
#系统默认：NO
setproctitle_enable=YES
#----------------------------------------------------------------------------------------
#YES:FTP服务器的用户在进入一个新目录时，会显示该目录所要注意的内容
#系统默认：NO
#备注：显示的默认文件是.message,也可以使用message_file来设置
dirmessage_enable=YES
message_file=.message
#----------------------------------------------------------------------------------------
#YES:显示文件所有者而不是UID
#默认：NO
#备注：当使用者登入后使用ls -al 之类的指令查询该文件时，预设会出现拥有者的UID，而不是该档案拥有者的名
text_userdb_names=YES
#----------------------------------------------------------------------------------------
#系统默认：/var/run/vsftpd/empty
#备注：该选项指定一个空目录的名字，ftp用户不应该在里面写入数据，在vsftpd不能请求到文件系统时，用户会进入该目录中
secure_chroot_dir=/var/run/vsftpd/empty
#----------------------------------------------------------------------------------------
#系统默认：无　  
#备注：当vsftpd工作在standalone模式时，所有本地通讯接口的默认的监听地址会被该地址覆盖
#listen_address=192.168.0.2　　 #绑定到某个IP,其它IP不能访问
#----------------------------------------------------------------------------------------
#系统默认：60
#备注：主动式连接(active)下，FTP服务器主动发出的ftp-data连接信号,在60s内得不到客户端的响应，则强制断线
connect_timeout=60
#----------------------------------------------------------------------------------------
#系统默认：60
#备注：被动式连接(passive)下，FTP服务器被动等待FTP客户端回应，超过60s内得不到客户端的响应，则强制断线
accept_timeout=60
#----------------------------------------------------------------------------------------
#系统默认：300
#备注：不论是主动式还是被动式，在FTP服务器与客户端的ftp-data连接已经成功建立后，由于线路问题，120s内还是无法顺利完成数据传送，则该连接会被vsftp强制剔除
data_connection_timeout=120
#----------------------------------------------------------------------------------------
#系统默认：300
#备注：如果用户在5分钟内没有命令操作，则强制脱机，避免占着茅坑不拉屎
idle_session_timeout=300
#----------------------------------------------------------------------------------------
#系统默认：0(无限制)
#备注：如果vsftp是以stand alone方式启动，该设置项可以设置同一时间最多可以有多少FTP客户端同时连接上vsftpd
max_clients=200
#----------------------------------------------------------------------------------------
#系统默认：0(无限制)
#备注：如果vsftp是以stand alone方式启动，该设置项表示可以从同相同源的网络地址处连接的最大客户端的数量
max_per_ip=4
#----------------------------------------------------------------------------------------
#系统默认：0（任意）
#备注：pasv模式的数据连接，被分配的最小端口号；将客户端的数据连接端口限定在50000—60000之间，防止被入侵者捣鬼。设置为0，表示随机选择大于1024的端口
pasv_min_port=50000
#----------------------------------------------------------------------------------------
#系统默认：0（任意）
#备注：pasv模式的数据连接，被分配的最大端口号
pasv_max_port=60000
#----------------------------------------------------------------------------------------
#系统默认：0(无限制)
#备注：本地用户传输率限制在50KB/s,0表示不受限制
local_max_rate=50000
#----------------------------------------------------------------------------------------
#系统默认：0(无限制)
#备注：匿名用户传输率限制在30KB/s，0表示不受限制
anon_max_rate=30000
#----------------------------------------------------------------------------------------
#系统默认：0666
#备注：上传文件的默认权限
file_open_mode=0666
#-----------------------------------------------------------------------------------------
#YES:在下载过程中，数据以ascii的模式进行传输
#系统默认：NO
ascii_download_enable=NO
#-----------------------------------------------------------------------------------------
#YES:在上传过程中，数据以ascii的模式进行传输
#系统默认：NO
ascii_upload_enable=NO
#-----------------------------------------------------------------------------------------
#YES:每个FTP连接都会拥有一个process负责，可以提高效率，但是，除非系统的配置较高，否则容易耗尽系统资源
#系统默认：NO
one_process_model=NO

#-----------------------------------------------------------------------------------------
#YES:任何上传失败的文件都会被删除
#系统默认：NO
delete_failed_uploads=YES
#-----------------------------------------------------------------------------------------
#YES:在pasv_address选项中使用hostname
#系统默认：NO
pasv_addr_resolve=NO
# pasv_address=(none)　　  #使vsftpd在pasv命令回复时跳转到指定的IP地址.(服务器联接跳转?)
#-----------------------------------------------------------------------------------------
#YES:所有的上传进程都会对上传的文件附加写锁;所有的下载进程对下载的文件共享读锁
#系统默认：YES
lock_upload_files=YES
#-----------------------------------------------------------------------------------------
#YES:关闭安全检查
#系统默认：NO
pasv_promiscuous=NO
#-----------------------------------------------------------------------------------------
#系统默认：vsftpd　　  
#备注：PAM service vsftpd将要使用的名字
pam_service_name=vsftpd
#-----------------------------------------------------------------------------------------
#系统默认：nobody　  
#备注：当服务器运行于最底层时使用的用户名，nobody的权限相当的低，就算被入侵，入侵者也只能获得nobody的权限
nopriv_user=nobody
#-----------------------------------------------------------------------------------------
#YES:允许使用ls -R命令
#系统默认：NO
#备注：最好不要允许使用ls -R,因为会占用大量的资源
ls_recurse_enable=NO
#----------------------------------------------------------------------------------------
#YES:使能以后，所有非匿名用户在登录之后都被归类为gust login
#默认：NO
#备注：一个gust login，会被重新映射到在guest_username中设置的身份
guest_enable=NO
#----------------------------------------------------------------------------------------
#前提：只有在guest_enable=YES时才会生效
#默认：ftp
#备注：指定访客的身份
guest_username=ftp
#----------------------------------------------------------------------------------------
#YES:虚拟用户使用与本地用户相同的权限
#NO:虚拟用户使用与匿名用户相同的权限
#默认：NO
virtual_use_local_privs=NO
#-----------------------------------------------------------------------------------------
#系统默认：无  
#备注：指定一个由逗号分离的FTP命令列表，在列表内的命令是被允许的，之外的命令将被拒绝
#cmds_allowed=ABOR,ACCT,APPE,CWD,CDUP,DELE,HELP,LIST,MODE,MDTM,MKD,NOOP,NLST,PASS,PASV,PORT,PWD,QUIT,REIN,RETR,RMD,RNFR,RNTO,SITE,SIZE,STOR,STAT,STOU,STRU,SYST,TYPE,USER
#-----------------------------------------------------------------------------------------
#系统默认：无  
#备注：指定一个由逗号分离的FTP命令列表，在列表内的命令是被禁止的
#备注2：如果一个命令既出现在cmds_allowed里面，又出现在cmds_denied里面，那么，cmds_denied优先，即该命令是被禁止的
#cmds_denied=DELE
#CWD - change working directory 更改目录
#DELE - delete a remote file 删除文件
#LIST - list remote files 列目录
#MKD - make a remote directory 新建文件夹
#NLST - name list of remote directory
#PWD - print working directory 显示当前工作目录
#RETR - retrieve a remote file 下载文件
#RMD - remove a remote directory 删除目录
#RNFR - rename from 重命名
#RNTO - rename to 重命名
#STOR - store a file on the remote host 上传文件
# ABOR - abort a file transfer 取消文件传输
# CWD - change working directory 更改目录
# DELE - delete a remote file 删除文件
# LIST - list remote files 列目录
# MDTM - return the modification time of a file 返回文件的更新时间
# MKD - make a remote directory 新建文件夹
# NLST - name list of remote directory
# PASS - send password
# PASV - enter passive mode
# PORT - open a data port 打开一个传输端口
# PWD - print working directory 显示当前工作目录
# QUIT - terminate the connection 退出
# RETR - retrieve a remote file 下载文件
# RMD - remove a remote directory
# RNFR - rename from
# RNTO - rename to
# SITE - site-specific commands
# SIZE - return the size of a file 返回文件大小
# STOR - store a file on the remote host 上传文件
# TYPE - set transfer type
# USER - send username
# less common commands:
# ACCT* - send account information
# APPE - append to a remote file
# CDUP - CWD to the parent of the current directory
# HELP - return help on using the server
# MODE - set transfer mode
# NOOP - do nothing
# REIN* - reinitialize the connection
# STAT - return server status
# STOU - store a file uniquely
# STRU - set file transfer structure
# SYST - return system type




#########################################################################################
##########################################匿名配置########################################
#########################################################################################
#YES:匿名登录被允许
#NO:匿名登录被允许
#系统默认：NO
#备注：只有该配置项为YES,匿名相关的所有配置才会有效
anonymous_enable=YES
#----------------------------------------------------------------------------------------
#系统默认：无
#备注：匿名用户登陆后的所处的目录
anon_root=/var/ftp
#---------------------------------------------------------------------------------------------
#YES:匿名用户登录时会略过密码检查的步骤，直接进入vsftpd服务器;
#NO:匿名用户登录时，vsftpd会向其询问登录密码
#系统默认：NO
no_anon_password=NO
#---------------------------------------------------------------------------------------------
#YES:匿名用户在登录时，除非提供email_password_file中指定的密码，否则不允许登录
#系统默认：NO
secure_email_list_enable=YES
email_password_file=/etc/vsftpd.email_passwords
#---------------------------------------------------------------------------------------------
#YES:将banned_email_file中指定的匿名用户登录时使用的密码(Email地址)封杀
#系统默认：NO
#备注：匿名用户登录系统时，会要求输入密码，密码就是该用户的Email地址，如果你很讨厌这些Email地址，可以将
#	  这些个Email地址列在banned_email_file指定的文件中，就能取消其登录的权限
deny_email_enable=NO
banned_email_file=/etc/vsftpd.banned_emails
#----------------------------------------------------------------------------------------
#系统默认：077
#备注：配置匿名用户上传文件的默认权限，-rw-------
#备注2：若想让匿名用户上传的文件能直接被匿名下载，就这设置这里为073，-rw----r--
anon_umask=077
#----------------------------------------------------------------------------------------
#YES:匿名用户只被允许下载只读文件
#系统默认：YES
#备注：匿名用户一般就允许有该权限即可
anon_world_readable_only=YES
#----------------------------------------------------------------------------------------
#前提：(1)writer_enable=YES;
#	  (2)该匿名用户在文件上传的目的地中有写权限。
#YES:匿名用户具有上传文件的权限
#系统默认：NO
#备注：给配置项也限制虚拟用户的上传操作，默认情况下，虚拟用户也就是匿名用户
anon_upload_enable=NO
#-------------------------------------------------------------------------------------------
#YES:所有匿名上传的文件的所属用户将会被更改成chown_username
#系统默认：NO
chown_uploads=YES
chown_username=ljj
#----------------------------------------------------------------------------------------
#YES:允许匿名用户除了上传和创建目录之外，还能执行写操作，诸如删除，重命名等
#系统默认：NO
#备注：这一般是不被允许的，如果要设置为YES,那么开放给匿名用户写入的目录需要调整权限，让vsftpd的PID拥有者才可以写入
anon_other_write_enable=NO
#----------------------------------------------------------------------------------------------
#前提：(1)writer_enable=YES;
#	  (2)该匿名用户在父目录中有写权限。
#YES:该匿名用户将被允许创建新目录
#系统默认：NO
anon_mkdir_write_enable=NO




##############################################################################################
##########################################本地配置#############################################
##############################################################################################
#(1)避免使用FTP登录的本地用户在Linux系统中离开该用户自己的家目录，而进入/etc 、/usr/local等
#   目录下随意浏览， 需要将用户登录后的活动范围限制在自己的家目录下面，且FTP登录后就位于自己的家目录下面
#(2)通过与下面三个配置的搭配，能实现以下几种效果：
#	1、当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，
#	   可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录；
#	2、当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，
#	   不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录；
#	3、当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录；
#	4、当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录；
#备注：最安全的方案应该的第一个，默认限制所有用户的活动范围，个别特殊的再进行特殊配置
#---------------------------------------------------------------------------------------------
#YES:允许本地用户登录
#系统默认：NO
#备注：对于任何非匿名登录，该配置必须使能
local_enable=YES

#----------------------------------------------------------------------------------------------
#安全机制一：处理本地用户登录系统后的活动范围
#YES:为本地用户提供用来限制用户登录后其活动范围的功能
#系统默认：NO
#备注：为了安全起见，应当开启该功能对用户的活动范围进行限
chroot_list_enable=YES
#----------------------------------------------------------------------------------------------
#YES:共性配置，所有本地用户将被限制在自己的用户主目录内活动
#系统默认：NO
chroot_local_user=YES
#----------------------------------------------------------------------------------------------
#YES:个性配置：在文件chroot_list下面列出的账户，可以切换到其他目录，而没有列出的，全部被限制在自己的主目录内
#系统默认：NO
chroot_list_file=/etc/vsftpd.chroot_list

#----------------------------------------------------------------------------------------------
#安全机制二：阻挡某些不受欢迎的本地用户，禁止其使用FTP登录系统
#YES:开启vsftpd提供的用来阻挡某些不受欢迎的账号的功能
#系统默认：NO
userlist_enable=YES
#----------------------------------------------------------------------------------------------
#前提：userlist_enable=YES
#YES:在userlist_file指定的文件中的用户，以及/etc/ftpusers文件中的用户无法使用vsftp
#NO:除了由userlist_file指定的文件中列出的用户，其他的用户都被拒绝登录,这个拒绝是在询问密码之前就被拒绝了
#系统默认：YES
userlist_deny=YES
userlist_file=/etc/vsftpd.allowed_users

#----------------------------------------------------------------------------------------------
#系统默认：077
#备注：该配置指定本地用户创建文件的默认权限：rw-------
local_umask=077
#----------------------------------------------------------------------------------------------
#此项设置每本地个用户登陆后其根目录为/home/username/.emacs.d
#系统默认:无
#备注：该配置指定本地用户在登录之后，默认处在家目录下面的那个目录下
#备注2：定义的目录可以是相对路径也可以是绝对路径.相对路径是针对用户家目录来说的
local_root=.emacs.d

#--------------------------------------------------------------------------------------------
#该配置项指定一个目录，该目录下面是一些文件，这些文件的文件名，均以本地用户各自的用户名命名，用户
#可以针对每个用户，做出不同的配置。当一个用户登录时，会去该目录下加载该用户自己的配置文件
#备注：该配置的功能非常强大，可以实现专门针对不同用户，给出不同的配置文件
#user_config_dir=/etc/vsftpd_user_conf




##############################################################################################
##########################################SSL配置#############################################
##############################################################################################
#备注：
#(1)ftp传输数据是明文，弄个抓包软件就可以通过数据包来分析到账号和密码，为了搭建一个安全性比较高ftp，可以结合SSL来解决问题
#(2)SSL(Secure Socket Layer)工作于传输层和应用程序之间,应用程序只要采用SSL提供的一套SSL套接字API来替换标准的Socket套接字,
#   就可以把程序转换为SSL化的安全网络程序,在传输过程中将由SSL协议实现数据机密性和完整性的保证
#(3)SSL取得大规模成功后,IETF将SSL作了标准化,并将其称为TLS,(Transport Layer Security),ftp结合SSL,将实现传输数据的加密,
#   保证数据不被别人窃取
#(4)vsftpd支持SSL，必须让OPENSSL≥0.9.6版本，还有就是本身vsftpd版本是否支持，查询vsftpd软件是否支持SSL，ldd /usr/sbin/vsft\
#   pd |grep libssl,如没有输出libssl.so.6 => /lib/libssl.so.6 (0xf7f27000)类似文本，说明此vsftpd版本不支持SSL
#(5)从底层来讲：使用了该功能，vsftpd将会针对OpenSSL来编译，支持SSL安全连接，并且是在FTP的命令通道和数据通道均加密
#(6)使用该功能FTP客户端也需要SSL支持才行
#备注2：手册建议，只有在需要的时候才使能它，因为vsftp不保证 OpenSSL libraries 的安全性
#----------------------------------------------------------------------------------------------
#YES:vsftpd将支持安全连接SSL
#系统默认：NO
ssl_enable=NO
#-------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:匿名用户将被允许使用安全的SSL连接
#系统默认：NO
allow_anon_ssl=NO
#----------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:所有的匿名用户在发送密码过程中都强制使用SSL连接
#系统默认：NO
force_anon_logins_ssl=YES
#----------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:所有的匿名用户在数据连接data-ftp中发送和接收数据都强制使用安全SSL连接
#系统默认：NO
force_anon_data_ssl=YES

#----------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:所有的本地用户在在数据连接data-ftp中发送和接收数据都强制使用安全SSL连接
#系统默认：NO
force_local_data_ssl=YES
#----------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:所有的本地用户在发送密码过程中都强制使用SSL连接
#系统默认：NO
force_local_logins_ssl=YES

#----------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:使用TLS v1 protocol连接
#系统默认：YES
ssl_tlsv1=YES
#----------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:使用SSL v2 protocol
#系统默认：NO
ssl_sslv2=NO
#----------------------------------------------------------------------------------------------
#前提：ssl_enable=YES
#YES:使用SSL v3 protocol
#系统默认：NO
ssl_sslv3=NO
#----------------------------------------------------------------------------------------------
#该配置指出RSA证书的路径，vsftpd会加载该文件来对FTP连接中的数据进行SSL加密
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
#----------------------------------------------------------------------------------------------
#该配置指出RSA private key的路径，vsftpd会加载该文件来对FTP连接中的数据进行SSL加密
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key




##############################################################################################
##########################################日志配置#############################################
##############################################################################################
#YES:上传或者下载的细节将会被记录在/var/log/vsftpd.log中，也有可能是在vsftpd_log_file指定的文件中
#默认：NO
#备注：因为默认的格式可读性更高，所以xferlog_std_format设置为NO,除非使用wu-ftp日志文件分析软件
xferlog_enable=YES
xferlog_std_format=NO
xferlog_file=/var/log/vsftpd_xferlog.log
#----------------------------------------------------------------------------------------
#YES:两种日志文件会同时生成
#系统默认：NO
#备注：如果FTP服务器不是很忙碌的情况下，定制出两个日志文件还是不错的选择
#备注2：默认/var/log/xferlog and /var/log/vsftpd.log
dual_log_enable=YES
vsftpd_log_file=/var/log/vsftpd.log
** 测试心得
--协议：ftp
--端口号：21
--chown_uploads设置为YES,在windos上使用的xftp软件，匿名用户就无法登录
--对于配置项：anon_root=/var/ftp，文件/var/ftp必须在FTP服务器下面存在，否则无法登录
* DONE [#C] theme:SSH服务
   CLOCK: [2017-10-10 二 18:29]--[2017-10-10 二 19:09] =>  0:40
1. 基础知识:
   1. SSH: secure shell protocol 安全的壳程序协议
   2. 远程服务器: 一台可供上网的主机上,安装提供远程服务的程序,比如SSHD,便可以将该主机称为一个远程服务器,用户可以远程取得该主机的Shell进行操作
   3. FTP同SSH最大的区别在于: SSH能够取得Shell对主机进行操作,因此,除非必要,否则通常应当关闭计算机的SSH服务防止被入侵
   4. 基于广域网和局域网的差别,可以将远程服务器分为: server类型和workstation类型,前者对因特网有限度的开放连接,后者只对内网内开放
   5. 基于TCP/IP运用层的差别,远程服务器主要有:明文传输的Telnet,RSH;加密传输的SSH,其中前者已经逐渐被后者取缔(当然了,还有图形接口的VNC,XDMCP,XRDP等就不说了)
   6. 明文传输: 数据包在网络上传输时,数据包的内容就是原始内容(Telnet)
   7. 加密传输: 数据包在网络上传输时,数据包的内容是经过加密的(SSH)
   8. SSH协议有2个版本,使用哪个版本,由/etc/ssh/sshd_config中的相关配置项决定,建议使用v2
   9. SSH协议本身提供两个服务器功能: 类似Telent的远程连接shell的服务器;类似FTP的sftp-server服务器.这两个服务均是架设在22号端口,由于ftp服务有更好的vsftpd,因此,主要使用ssh的远程功能
2. 工作原理
   1. 在服务器上安装远程服务程序: openssh-server
	  1. 检查是否安装: dpkg -s openssh-server
      2. 安装：apt install openssh-server
      3. 重要说明: 在安装该软件时,会生成/etc/ssh/ssh_host*,这是采用3种OPEN-SSH自身支持的加密算法产生的,服务器公钥和私钥,共6个文件
	  4. 备注:经测试,安装openssh-server以及openssh-client中的其中一个会默认将另外一个也安装上,即默认既可以作为服务器又可以作为客户端
   2. 在客户端上安装远程登录程序: openssh-client
	  1. 检查是否安装: dpkg -s openssh-client
	  2. 安装：apt install openssh-client
	  3. 重要说明: 在安装该软件时,会生成/etc/ssh/ssh_host*,这是采用3种OPEN-SSH自身支持的加密算法产生的,服务器公钥和私钥,共6个文件 
	  4. 备注:经测试,安装openssh-server以及openssh-client中的其中一个会默认将另外一个也安装上,即默认既可以作为服务器又可以作为客户端
   3. 服务器生成秘钥文件: /etc/ssh/ssh_host*
	  1. 在第一次安装openssh-xxx过程中,会计算出服务器(非客户端)的公钥文件和私钥文件,存放在/etc/ssh/下面,客户端连接该服务器时,会查找这些文件中的某个公钥传输给客户端
	  2. /etc/ssh/ssh_host*这6个公钥和私钥是在安装软件过程中生成的,所以,在没有找到如何使用命令生成之前(据说删除之后重启ssh就能生成,我在debian上测试不知道为何不管用),最好不要轻易删除这6个文件
	  3. 6个秘钥的命名(系统不同略有差异): ssh_host_dsa_key ,ssh_host_dsa_key.pub, ssh_host_rsa_key,ssh_host_rsa_key.pub, ssh_host_key,ssh_host_key.pub
	  4. 其中: ssh-host-key*是SSH version1的,ssh-host-rsa-key是SSH version2的rsa加密, ssh-host-dsa-key是SSH version2的dsa加密(默认)
   4. 服务器开启: openssh-server:
	  1. 检查是否开启: systemctl status sshd :active (running)
      2. 开启ssh服务：systemctl start sshd
	  3. 重启ssh服务: systemctl restart sshd
	  4. 关闭ssh服务: systemctl stop sshd  :inactive (dead)
   5. 查看服务器是否开启22号端口: netstat -tlnp | grep ssh
   6. 检查客户端是否安装openssh-client: dpkg -s openssh-client
   7. 客户端使用openssh-client主动连接服务器,服务器处于侦听状态
   8. 服务器将自己在4取得的自己的公钥发送给客户端(明码发送)
   9. 若客户端是第一次连接到服务器,那么,在接收服务器的公钥后,询问用户是否将其记录到客户端的主目录~/.ssh/known_hosts中(是,继续登录,否,退出)
   10. 若不是第一次连接,则对比本次接收的服务器的公钥与记录中的是否一致,一致则继续登录,不一致则发出警告并退出(ssh的自我保护,防止伪装的服务器公钥浑水摸鱼)
   11. 客户端处置完毕服务器的公钥之后,则建立(或查找)自己的公钥和私钥,并将客户端自己的公钥传递给服务器
   12. 服务器收到客户端的公钥之后,理论上应当会将其记录在/etc/ssh/ssh_known_hosts文件里面(不知为啥,实测没有生成该文件)
   13. 至此,服务器有了客户端的公钥和自己的私钥,而客户端有了服务器的公钥和自己的私钥,接下来就可以进行数据的加密传输了
   14. 服务器向客户端发送的数据,先使用该客户端自己的公钥进行加密,该客户端收到加密的数据包之后使用自己的私钥进行解密
   15. 客户端向服务器发送的数据,向使用服务器的公钥进行加密,服务器端收到加密的数据包之后使用使用自己的私钥进行解密
   16. 循环反复,实现了数据的安全加密传输
3. 加密与解密技术
   1. 目前常见的网路数据包加密技术通常采用:非对称密钥系统,主要研究的是对两把不一样的 公钥 和 私钥 进行加密与解密的过程
   2. 公钥: public key, 在用户客户端生成,提供给远程服务器使用,用于加密从远程服务器网络传输至用户客户端的数据
   3. 私钥: private key, 在用户客户端生成,由用户客户端自己使用,用于解密从远程服务器接收到的传给自己的数据
   4. 使用非对称密钥系统进行网路数据包加密的计算机系统中,每台计算机都必须有一个公钥和私钥(包括服务器自己)
   5. 加密解密算法: 目前SSH上使用的主要是rsa或者dsa机制
   6. 原理:
      1. 服务器与客户端在完成3次握手之后,需要做的第一件事是: 交换公钥(该过程中,公钥被抓包窃取也没关系,因为有公钥没有私钥也没法解密)
      2. 公钥交换完毕之后,使用服务器的公钥加密客户端向服务器发送索要数据的命令,然后在网络上安全的传输(该过程中,抓包窃取到的数据是加密的,因此该过程也是安全的)
	  3. 服务器收到客户端发送过来的加密后的数据,由于加密的公钥是自己的,所以,找到存储在服务器本地的私钥进行解密,的到真正的命令
	  4. 服务器收到数据请求命令之后进行解析,然后提取相关数据,并使用客户端的公钥将数据加密之后,通过网络发送出去(该过程中,抓包窃取到的数据是还是加密的,因此该过程也是安全的)
	  5. 如此反复传输数据,每个过程均是安全的!
	  6. 备注: 第一步交换公钥,实际上可以通过人工交换,即,让服务器管理员去收集想要使用该服务器的用户的客户端公钥,放到服务器的相关目录下即可
4. 秘钥文件:
   1. /etc/ssh/ssh_host_*.pub: 服务器的公钥,该公钥会被发送给客户端,存储在客户端的~/.ssh/known_hosts里面
   2. /etc/ssh/ssh_host_*_key: 服务器的私钥,谨慎保管,解密客户端发送过来的数据包时用得到
   3. /etc/ssh/ssh_known_hosts: 服务器存放客户端公钥的文件,客户端的向服务器发送的公钥存放在该文件内,系统管理员应当收集到各个客户端的公钥,然后放到该文件内,其格式是: 系统名字, 公钥, 可选的注释
   4. ~/.ssh/id_rsa.pub: 客户端的公钥,该公钥会被发送给服务器,存储在服务器的/etc/ssh/ssh_known_hosts里面
   5. ~/.ssh/id_rsa: 客户端的私钥,谨慎保管,解密服务器发送过来的数据包时用得到
   6. ~/.ssh/known_hosts: 客户端存放服务器公钥的文件(dsa),客户端每次连接到服务器,服务器向客户端发送的公钥就存储在文件内,所以,该文件可以用户确认客户端是否正确的连接上服务器
5. 制作秘钥文件:
   1. 服务器秘钥的生成: 安装openssh-server过程中生成;据说重启服务器时也可以生成,我在debian上测试不知道为何不管用
   2. 客户端秘钥的生成: ssh-keygen -t rsa -C "ytulinjiajun@163.com"
      1. -t  用于指定加密类型，常见的有RSA和DSA加密方式，默认是DSA;
      2. -C 作为批注
      3. 三次回车，按默认路径.ssh以及不需要密码安装即可
6. 客户端配置文件:
   1. /etc/ssh/ssh_config
   2. ~/.ssh/config
7. 服务器端配置文件: /etc/ssh/sshd_config 
8. 操作:
   1. 服务器:
      1. 检查服务器是否安装: dpkg -s openssh-server
      2. 检查服务器22号端口: netstat -tlnp | grep ssh
      3. 检查服务器是否开启: systemctl status ssh
      4. 开启ssh服务：systemctl start ssh
      5. 重启ssh服务: systemctl restart ssh
      6. 关闭ssh服务: systemctl stop ssh
   2. 客户端:
      1. 检查客户端是否安装: dpkg -s openssh-client
      2. 登录远程服务器: ssh telnet-user-name@192.168.19.100
	     1. 命令: ssh telnet-user-name@192.168.19.100
	     2. 说明: telnet-user-name是远程服务器上某用户名的用户名,192.168.19.100是远程服务器的ip地址
	     3. 结果: 在本地客户端,以远程服务器上的某用户名登录,取得远程shell,能在本地操作这个shell
	     4. 注意: 经测试,此种方式登录,默认采用的加密方式为dsa
	     5. 登录 and 登录: 可以登录到A服务器,再借助A服务器登录到B服务器,这是允许的
      3. 不登录服务器直接发送一个命令过去执行: ssh -f telnet-user-name@192.168.19.100 cmd
      4. 第一次登录时自动添加服务器公钥至~/.ssh/known_hosts中而不用询问yes: ssh -o StrickHostKeyChecking=no telnet-user-name@192.168.19.100 cmd
      5. 退出登录:exit
	  6. 使用ssh实现sftp: 当你取得shell后,远程操作服务器过程中,想要下载远程服务器上的某个文件,或者上传某个文件,可以使用ssh的sftp而不必去专门搭建vsftpd,非常高效
		 1. 登录: sftp telnet-user-name@192.168.19.101
		 2. 浏览: ls
		 3. 切换: cd
		 4. 显示路径: pwd
		 5. 创建目录: mkdir dir-name
		 6. 删除目录: rmdir dir-name
		 7. 删除文件或目录: rm PATH
		 8. 更改文件或目录名: rename old-name new-name
		 9. 上传文件: put PATH
		 10. 下载文件: get PATH
		 11. 本地浏览: lls
		 12. 本地切换: lcd
		 13. 本地显示路径: lpwd
		 14. 本地创建目录: lmkdir dir-name
9. 制作不用密码即可登录的SHH用户
   1. 原理:
	  正常情况下,客户端向服务请求登录时,首先会收到服务器发送过来的的公钥,客户端对比或保存服务器的公钥至~/.ssh/known_hosts中,然后,客户端向服务其发送自己的公钥,服务器收到之后也保存至/etc/ssh/ssh_known_hosts里面,进接着立即进入密码认证阶段,密码认证成功之后就能取得shell进行工作了
      但是,如果事先客户端的公钥放置在服务器上,客户端用户自己的家目录的.ssh/authorized_keys下面(由/etc/ssh/sshd_config中的AuthorizedKeysFile指定),则,该客户端用户在登录服务器时,可以省略掉输入密码的步骤
   2. 实现:
	  1. 服务器管理员收集各个客户端用户的公钥
	  2. 在服务器上,由服务器管理员在指定用户的家目录下面创建一个目录: .ssh/,并执行chomd 700 .ssh
	  3. 在服务器上,由服务器管理员在指定用户的家目录下的.ssh/中新建一个文件: authorized_keys,并执行chomd 644 authorized_keys
	  4. 在服务器上,由服务器管理员将收集到的各个客户端用户的公钥拷贝到指定用户的家目录下的.ssh/authorized_keys文件内部: cat id_rsa.pub >> ~/.ssh/authorized_keys
	  5. 到此为止,这些个提交了自己公钥的客户端登录服务器上的那个指定的用户时就不再需要身份认证了
   3. 要点:
	  1. 客户端用户必须制作出public_key和private_key
	  2. 将客户端用户的public_key放到服务器哪个用户的家目录下面的.ssh/authorized_keys中,该客户端用户就能无需密码远程登录到该系统
	  3. 服务器用户家目录下: .ssh/的权限是700, .ssh/authorized_keys的权限是644
10. 安全
	1. 不要允许root用户或者管理员远程登录: #permitRootLogin no
	2. 不要将SSH服务暴露在整个Internet的环境下,通常,尽量使用防火墙规则局限在几个小范围的ip内或者限制主机名
	3. 建议使用非标准port,尤其在外网中,还是不要开放22号端口的好,这样,能避开一些ISP或者Cracker的扫描: ssh -p 23 test@192.168.19.10
11. SSH的高级功能: rsync实现异地备份
	1. 命令: rsync -av -e ssh test@192.168.19.10:~ /tmp
	2. 注意:该功能是将服务器上的~复制到本地客户端的/tmp中
Blog creation time:[2017-09-05 二 09:06]

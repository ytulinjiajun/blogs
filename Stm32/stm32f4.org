* DONE [#D] theme:我的工具网站
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
--Java运行环境JRE：http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html
--交叉编译链arm-none-eabi-gcc:https://launchpad.net/gcc-arm-embedded/+download
--STM32CubeMx工具：http://www.st.com/content/st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-configurators-and-code-generators/stm32cubemx.html
--STM32cubemx库：上面的工具链接，点击EMBEDDED SOFTWARE切换到软件，下载对应开发板的库
--sw4stm32官网：http://www.openstm32.org/HomePage (需要注册) 
--平台搭建教程1：http://www.cnblogs.com/amanlikethis/p/3803736.html
--平台搭建教程2：http://www.stmcu.org/module/forum/thread-606548-1-1.html

--STM32Cubemx学习1：http://blog.csdn.net/ybhuangfugui/article/list/3
--STM32Cubemx学习2:http://www.waveshare.net/study/article-629-1.html
Blog creation time:[2017-09-05 二 08:46]
* DONE [#D] theme:linux平台搭建stm32开发环境
 - State "DONE"       from "TODO"       [2017-09-05 二 09:30]
** 搭建开发平台预览：
0、安装java运行平台：JRE

1、安装eclipse IDE for C/C++ developers：sw4stm32+stlink

2、安装交叉编译链：arm-none-eabi-gcc

3. 安装stm32cubemx

4、安装GNU ARM Eclipse插件包

5、新建一个LED_Test工程并配置、编译

6、安装GDB调试插件--C/C++ GDB HardWare Debugging

7、设置Eclipse调试环境并调试

备注：Eclipse只是来调用交叉编译链，再调用之前还需要安装“GNU ARM Eclipse插件”


** 安装JRE
1.相比Fedora,ubuntu上安装jre显得更加麻烦一些，原因是JRE只提供了RPM包和Tar.gzip格式的安装包，
Ubuntu是不支持RPM包的，当然，可以用alien将rpm转换为deb格式的包然后使用dpkg -i xxx.deb来安装，
不过这个转换不是所有情况下都能转换成功的，比如JRE我亲测就不可以，所以只能把苗头对准.tar.gzip包了;

2.下载.tar.gzip格式的JRE安装包;

3.新建目录：/usr/lib/java,并将安装包解压至该目录;

4.在/etc/envirenment下面添加环境变量：
JAVA_HOME="/usr/lib/java/jre1.8.0_131"
CLASSPATH="$JAVA_HOME/lib"
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$JAVA_HOME/bin"

5.安装JRE：
sudo update-alternatives --install /usr/bin/java java /usr/lib/java/jre1.8.0_131/bin/java 300

6.安装好这个jre了，然而可能系统中有多个jre，那么系统究竟判断用那一个来作为默认的jre呢，就需要使用如下的命令来配置：
sudo update-alternatives --config java

7.根据提示，选择刚刚安装的JRE作为默认的JRE，至此，Ubuntu安装JRE成功


** 安装sw4stm32:
1.到上面的官方网站上下载最新版的sw4stm32的linux版本：install_sw4stm32_linux_64bits-latest.run 
2.在合适的位置新建一个安装路径：/home/ljj/stm32/sw4stm32/sw4stm32-workbench-install-soft
3.更改权限：chmod +x
4.sudo ./install_sw4stm32_linux_64bits-latest.run -f
5.依照提示输入指令即可
备注：必须使用sudo；必须加-f后缀；安装路径不要有中文;

** 安装stm32cubemx
1.到上面的官方网站上下载最新版的stm32cubemx:en.stm32cubemx.zip；
2.安装zip解压程序：apt install unzip
3.解压stm32cubemx.zip：unzip en.stm32cubemx.zip;
4.查看文件是否有执行权限，若没有则加上权限;
5.安装：java -jar SetupSTM32CubeMX-4.21.0.exe -console;
6.运行：java -jar STM32CubeMX -i

Blog creation time:[2017-09-05 二 08:47]
* DONE [#D] theme:windows平台搭建stm32开发环境
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
1.一定要将字符编码改为gb2312;
2.一定添加下面给出的注释模板;
Blog creation time:[2017-09-05 二 08:49]
* DONE [#D] theme:问题收集
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
1.2017年6月28号下午3点15分,在组织带UCOSIII任务处理框架时,遇到一个关于条件编译的问题,折腾了两个小时没有找出原因,即将绝望想要放弃该框架时
突然发现问题所在,特记录在案,问题描述如下:
--A文件(.h文件)中定义一个宏:#define a  1
--B文件中使用条件编译:#if a ... #endif
如上两点所述,编译没有错误,但是B中...代码无法访问,谜底是,需要在B中将A文件include进来
Blog creation time:[2017-09-05 二 08:50]
* DONE [#D] theme:关于时钟树
 - State "DONE"       from "TODO"       [2017-09-05 二 09:32]
** 时钟源：
1-1.LSI：
--内部低速时钟;
--32kHZ;
--用于驱动独立看门狗;用于RTCCLOCK

1-2.LSE：
--外部低速时钟;
--外部晶振：32.768KHZ;
--PC14引脚接OSC32_IN
--PC15引脚接OSC32_OUT
--晶振两端各需要10pf的电容，详情参看原理图
--用于驱动RTC时钟（RTCCLOCK）;
--用于MCO1（PA8）时钟输出;

1-3.HSI：
--内部高速时钟;
--16MHZ;
--用作PPL的输入源;
--用于MCO1（PA8）时钟输出;
--用于SYSCLOCK;
--用作PPL的输入源;

1-4.HSE：
--外部高速时钟;
--外部晶振：8MHZ
--PH0-OSC-IN引脚接OSC_IN
--PH1-OSC-OUT引脚接OSC_OUT 
--晶振两端各需要22pf的电容和一个1M的电阻，详情参看原理图
--用作PPL的输入源;
--用于MCO1（PA8）时钟输出;
--用于MCO2（PC9）时钟输出;
--用于SYSCLOCK;用作PPL的输入源;
--用于RTCCLOCK;

** 几个重要时钟:
1.PPLCLK：（默认选HSE的8MHZ作为输入）
--主PPL锁向环倍频输出时钟P相关;
--来源：HSI(16MHZ)或者HSE(8MHZ)，记为input;
--几个重要参数：M=8;xN=336;P=2;Q=7;
--PPLCLK = (input/M) * xN / P = (8/8) * 336 / 2 = 168MHZ;

2.PPL48CK：（默认选HSE的8MHZ作为输入）
--主PPL锁向环倍频输出时钟Q相关;
--来源：HSI(16MHZ)或者HSE(8MHZ)，记为input;
--几个重要参数：M=8;xN=336;P=2;Q=7;
--PPL48CK = (input/M) * xN / Q = (8/8) * 336 / 7 = 48MHZ;

3.SYSCLK：（默认选PPLCLK的168MHZ作为输入）
--系统时钟;
--来源：HSI（16Mhz）、HSE（8Mhz）、PPLCLk(168MHZ)

4.SysTick:固定为AHB的8分频：21MHZ

5.AHB：固定等于SYSCLK，168MHZ
5-1.AHB1：
5-2.AHB2：
5-3.AHB3：

6.APB：AHB分频后的时钟，默认不分频，168MHZ
5-1.APB1：
5-2.APB2：
5-3.APB3：
** 时钟树相关的配置文件：
1.startup_stm32f40_41xxx.s：
--该文件是系统上电后第一个被加载的启动文件;
--在第179行，Reset hander部分，进入main入口之前，调用了SystemInit函数;
--SystemInit函数在system_stm32f4xx.c中的第417行处提供;

2.system_stm32f4xx.c:
2-1.该文件是系统的配置文件，完成系统初始化配置（时钟树）;
2-2.重点在三个方面：时钟树主PPL锁向环相关参数配置;SystemInit函数；SetSysClock函数;
2-3.SystemInit函数：
--首先根据是否开启FPU配置浮点运算单元;
--配置CR寄存器打开HSI时钟;
--在HSI时钟的背景下，配置系统启动必要的寄存器;
--调用SetSysClock函数去配置系统时钟源、PPL锁向环倍频因子、AHB和APB预分频器等配置
2-4.Setsysclock函数：
--配置时钟树;
--使能外部时钟HSE，等待HSE稳定;
--配置时钟树中系统相关的所有分频因子;
--配置完毕;

3.stm32f4xx.h
--在修改了上面的system_stm32f4xx.c文件之后，记得不要忘了同步修改该文件的HSE_VALUE;
--该文件的123行默认定义HSE_VALUE的值为25000000,由于我们使用的外部晶振是8MHZ，所以，
修改该值为8000000即可

小结：
--系统的启动顺序：
系统上电 --> 从startup_stm32f40_41xxx.s中的SystemInit入口进入，进行系统配置 --> 
返回startup_stm32f40_41xxx.s --> 进入main入口 --> 执行用户程序
--文件system_stm32f4xx.c是系统最重要的配置文件，里面涉及整个系统时钟树的所有参数，但是
很多配置选择默认配置即可，我们主要关注主PPL锁向环倍频器的分频因子的设置即可;
Blog creation time:[2017-09-05 二 08:50]
* DONE [#D] theme:注释模板
	- State "DONE"       from "TODO"       [2017-09-05 二 09:32]
--Edit-->Configuration-->Text Completion;
--new 一个comment-template
--我的文件模板：
/**
  *------------------(C) COPYRIGHT 2017 LJJ--------------------
  *@File Name        : xxx 
  *@Author           : linjiajun
  *@Version          : V1.0.0
  *@Date             : 2017-6-6
  *@Brief            : xxx
  *		       + xxx 	
  *                    ++ xxx
  *                    +++ xxx  
  *-----------------------------------------------------------
  */

--我的函数模板：
/**
  *------------------(C) COPYRIGHT 2017 LJJ--------------------
  *@Author: linjiajun
  *@Date: 2017-6-6
  *@Brief: xxx 
  *@Param xxx: xxx
  *@Param xxx: xxx		  
  *@Param xxx: xxx               
  *@Param xxx: xxx               
  *-----------------------------------------------------------
  */

--我的宏模板
/**
  *------------------(C) COPYRIGHT 2017 LJJ--------------------
  *@Author: linjiajun
  *@Date: 2017-6-6
  *@Brief: xxx
  *-----------------------------------------------------------
  */

2.安装zip解压程序：dnf install unzip
3.解压stm32cubemx.zip：unzip en.stm32cubemx.zip;
4.查看文件是否有执行权限，若没有则加上权限后再执行：sudu ./SetupSTM32CubeMX-4.15.0.linux
5.如果你的系统是64位的话，这个地方可能会报错，显示：/lib/ld-linux.so2:bad ELF interpreter:No such file or directory
这是因为stm32cubemx是32位的程序，解决方法，dnf install glibc.i686,如果还有如下错误：...:libsrdc++.so.6...
则，dnf install libstdc++.so.6;
Blog creation time:[2017-09-05 二 08:51]
* DONE [#D] theme:关于MDK编码问题
	- State "DONE"       from "TODO"       [2017-09-05 二 09:32]
1.在MDK23上测试，转换为UTF-8在编辑代码时虽然能友好显示汉字，但是烧录到stm32后出现乱码;
2.建议使用GB2312编码，该编码虽然字符比较丑陋，但是，适当设置选择字体（比如仿宋，10号，加粗）;
3.我的工具里面收录一个编码转码软件;
Blog creation time:[2017-09-05 二 08:52]
* DONE [#D] theme:DMA库函数研究
 - State "DONE"       from "TODO"       [2017-09-05 二 09:32]
** DMA本质抽象：
1.存储器：源或者目的;
--我们希望实现从存储器到外设的自主传输，存储器是源;
--我们希望实现从外设到存储器的自主传输，存储器是目的;

2.外设：源或者目的;
--我们希望实现从存储器到外设的自主传输，存储器是源;
--我们希望实现从外设到存储器的自主传输，存储器是目的;

3.流： 传输媒介;
--外设有多个，存储区也有多个，多个外设到多个存储器的传输，自然需要分别将其分开进行，一个流就对应一组外设、存储器连接;
--一个DMA有8个流，一个流上面至多可以挂载达8个外设;

4.FIFO：存储介质 
--外设和存储器之间传输的是数据，传输过程中自然需要缓冲存储区，FIFO就是这个存储区;
--每个流都单独享有一个FIFO;

5.映射表：传输规范
--厂家设计芯片时，已经规划好了每个流上挂载了哪些外设
--这些外设至多有8个，每个外设就是一个通道;
--具体哪个外设有权利享用这个流，通道请求说了算;

6.通道请求:操控者
--每个流上固定挂载8个外设，每个外设占据一个通道，所以每个流至多有8个通道请求;
--通道请求的目的就是告知仲裁器，哪个外设有权利享用这个流
--通道请求虽然至多有8个，但是一个流，一次只能配置一个通道请求，这个通道请求将会作为仲裁器的输入

7.仲裁器：组织者
--仲裁器仲裁的目的是依照通道请求的优先级来组织通道请求的顺序;
--仲裁器仲裁的对象是通道请求，仲裁的结果是挂载在流上的所有外设当中，哪个外设有权利享用这个流;
--仲裁器的输入是通道请求，每个流每次只能配置一个通道请求，一个DMA有8个流，所以仲裁器至多需要仲裁8个通道请求;

** 资源分析：
--有2个DMA控制器;
--每个DMA控制器有8个数据流;
--每个数据流享有一个FIFO;
--每个DMA控制器有1个仲裁器;
--每个仲裁器最多接受8个通道请求;
** 工作原理
--自动封装解封字节序的概念：当PSIZE和MSIZE的宽度不相等时，由FIFO来实现自动封装解封操作

--双缓冲模式：DMA_SxCR的DBM位置1将使能双缓冲模式，使能双缓冲模式后将自动使能循环模式（此时与DMA_SxCR的CIRC的配置无关），双缓冲模式下，每次事物结束后，交换存储器指针。
比如，两个存储器都向一个外设传输数据，第一个存储器在传输时可以去填充第二个存储器，第一个存储器传输完毕后自动切换到第二个存储器（交换存储器指针）并且有去填充第一个存储器；
--DMA中断：当发生半传输；传输完成；传输错误；FIFO错误；直接模式错误；等事件时，如果使能了DMA中断，就会产生相应的中断；

17.默认情况下，FIFO以直接模式进行操作，不使用FIFO阀值;
18.直接模式下，如果DMA配置为存储器到外设时，DMA会将数据从存储器预加载到FIFO，一旦外设触发DMA请求时，立即开始数据传输;
19.存储器到存储器传输时，不得使用直接模式;
20.有两种流控制模式：DMA流控制模式，外设流控制模式;

 

23.DMA流x的配置过程：
--只有EN位的值为0时，才表示可以配置数据流，但是如果当前有正在进行的数据流操作，软件将EN位立即写0，并不会立即生效，只有所有的当前传输已经完成时该位才会被写0；
--配置EN为0来禁止数据流，并进行确认是否真的为0，以进入准备配置状态；
--应将先前数据块DMA传输中在状态寄存器DMA_LISR和DMA_HISR中所有数据流专用的位置置0，然后才可以才重新使用数据流；
--设置DMA_SxPAR外设端口寄存器地址：外设事件发生之后，数据会从此外设地址移动到外设端口或者从外设端口移动到此外设地址；
--设置DMA_SxM0AR存储器地址，双缓冲模式下还要设置DMA_SxM1AR，外设事件发生后，将从此存储器读取数据或将数据写入该存储器；
--配置数据传输的数量，每次出现一个外设事件或者每出现一个节拍的突发传输，该值都会递减；
--选择DMA的通道请求
--如果外设用作流控制器而且外设也支持此功能的话，将DMA_SxCR寄存器中的PFCTRL位置一；
--配置仲裁器的流优先级
--配置FIFO的使用情况（使能或禁止，发送和接受阀值）
--配置数据流的传输方向；
--配置外设和存储器宽度；
--配置是否循环模式；
--配置单独或突发事务；
--配置外设和存储器增量和固定模式；
--配置双缓冲模式；
--配置传输完成一半或全部完成
--配置错误中断；
--使能数据流；
备注：

--一旦在AHB目标端口上传输了一半的数据，传输一半的标志（HTIF）便会置1，如果使能了半传输中断标志位（HTIE），还会 产生中断；
** DMA初始化：DMA_Init()
*** （1）DMA1和DMA2共用该初始化函数
--有2个DMA控制器;
--每个DMA控制器有8个数据流;
--通过参数DMAx_Streamy(x=1,2 y=0~7)来确定是哪个DMA的哪个数据流；
*** （2）确定哪个数据流:DMAy_Streamx
--有2个DMA控制器;
--每个DMA控制器有8个数据流;
--通过参数DMAx_Streamy(x=1,2 y=0~7)来确定是哪个DMA的哪个数据流；
*** （3）确定哪个通道请求:DMA_Channel
--配置8个通道中的哪个通道请求将被选中，送给仲裁器，确认挂载在流上面的所有外设，哪个可以使用这个流：DMA_SxCR的CHSEL[2:0];
--由于映射表的存在，所以当配置了数据流和通道后，哪个外设被挂载到该数据流上就已经确定下来了；
*** （4）确定外设的基地址:DMA_PeripheralBaseAddr
--在（2）和（3）的配置之后就唯一确定了当前数据流上挂载的外设；
--我是的目的是实现外设和存储器之间数据的传输，所以有必要告知DMA控制器双方数据存储的首地址；
***  (5) 确定存储器的基地址:DMA_Memory0BaseAddr
--在（2）和（3）的配置之后就唯一确定了当前数据流上挂载的外设；
--我是的目的是实现外设和存储器之间数据的传输，所以有必要告知DMA控制器双方数据存储的首地址；
***  (6)确定传输方向:DMA_DIR 
--外设到存储器，存储器到外设，存储器到存储器：DMA_SxCR的DIR[1:0];
--源地址和目标地址的选择：
DMA_SxCR的DIR[1:0]	方向		源地址		目标地址
00			外设到存储器	DMA_SxPAR	DMA_SxM0AR
01			存储器到外设	DMA_SxM0AR	DMA_SxPAR
10			存储器到存储器	DMA_SxPAR	DMA_SxM0AR
11			保留		--		--
***  (7)确定单次传输数据的数量:DMA_BufferSize
--数据传输的量,由DMA流控值制器和外设流控制器配置，要传输数据的数量必须在使能数据流之前，写入到DMA_SxNDTR中;
***  (8)确定外设的地址是否递增:DMA_PeripheralInc
--指针自增：外设和存储器都各自有一个指针，在每次传输之后可以设置让其自动向后递增或者保持常量;
--通过DMA_SxCR的PINC和MINC进行设置，如果使能了递增模式，根据PSIZE和MSIZE设置的数据宽度，下一次数据传输的地址递增1；
--通过单个寄存器访问外设或目标数据时，禁止递增模式十分有用；
***  (9)确定存储器的地址是否递增:DMA_MemoryInc
--指针自增：外设和存储器都各自有一个指针，在每次传输之后可以设置让其自动向后递增或者保持常量;
--通过DMA_SxCR的PINC和MINC进行设置，如果使能了递增模式，根据PSIZE和MSIZE设置的数据宽度，下一次数据传输的地址递增1；
--通过单个寄存器访问外设或目标数据时，禁止递增模式十分有用；
***  (10)确定外设数据宽度:DMA_PeripheralDataSize
--数据传输宽度：使用FIFO时，源和目标的数据宽度通过DMA_SxCR的PSIZE和MIZE设置8,16,32位位宽;
--当PSIZE和MSIZE的宽度不相等时，由FIFO来实现自动封装解封操作;
***  (11)确定存储器数据宽度:DMA_MemoryDataSize
--数据传输宽度：使用FIFO时，源和目标的数据宽度通过DMA_SxCR的PSIZE和MIZE设置8,16,32位位宽;
--当PSIZE和MSIZE的宽度不相等时，由FIFO来实现自动封装解封操作;
***  (12)确定是否开始循环模式:DMA_Mode
--循环模式：可以用来处理连续数据流，由DMA_SxCR的CIRC配置，当数据传输完毕后，DMA_SxNDTR会减到0，此时该寄存器会自动加载初始时刻设置的值并继续响应DMA请求；
***  (13)确定通道的优先级:DMA_Priority_Medium
--每个仲裁器最多接受8个通道请求;
--仲裁器优先级配置：DMA_SxCR的PL[1:0],非常高，高，中，低：DMA_SxCR,大于4个流同时工作时4个优先级不够用，会有重复，此时硬件优先级起作用，
如果软件优先级相同，则看流的编号，数据流0的优先级高于数据流1的优先级;
--只有赢得数据流的仲裁后，通道请求才有权访问AHB，DMA_SxCR的PL[1:0]为每个数据流定义优先级执行仲裁;
***  (14)确定是否开始FIFO模式:DMA_FIFOMode
--每个数据流享有一个FIFO;
--每个FIFO有4个字8个字节，阀值可由软件设置为1/4、1/2、3/4、满，需要DMA_SxFCR的DMMIS置1来使能FIFO阀值级别;
--刷新FIFO：当复位禁止DMA_SxCR的EN位时以及配置数据流后，需要刷新FIFO，将之前存储在FIFO之中的数据清理干净后，再开启DMA_SxCR的EN位使能FIFO;
--默认情况下，FIFO以直接模式进行操作，不使用FIFO阀值;
***  (15)设置FIFO的阀值:DMA_FIFOThreshold
--默认情况下，FIFO以直接模式进行操作，不使用FIFO阀值;
--每个FIFO有4个字8个字节，阀值可由软件设置为1/4、1/2、3/4、满，需要DMA_SxFCR的DMMIS置1来使能FIFO阀值级别;
***  (16)配置存储器突发传输的突发增量:DMA_MemoryBurst
--单次传输：根据DMA_SxCR的PSIZE[1:0]位的值，每个DMA请求产生一次字节，半字，或字的传输;
--突发传输：根据DMA_SxCR的PBUSH[1:0]和PSIZE[1:0]的值，每个DMA的请求相应的生成4个，8个或是16节拍的字节，半字，或字的传输;
***  (17)配置外设突发传输的突发增量：DMA_PeripheralBurst
--单次传输：根据DMA_SxCR的PSIZE[1:0]位的值，每个DMA请求产生一次字节，半字，或字的传输;
--突发传输：根据DMA_SxCR的PBUSH[1:0]和PSIZE[1:0]的值，每个DMA的请求相应的生成4个，8个或是16节拍的字节，半字，或字的传输;




****
1-1.FIFO模式：
--启动传输：DMA_SxCR的EN位为数据流使能位，使能该位后，当产生外设请求时，会启动从外设到FIFO的数据传输;
--FIFO到存储器：当达到FIFO的阀值时，FIFO的内容全部移出并存储到目标存储器内;
--终止传输：DMA_SxCR的EN位被软件清零或者突发情况硬件清零;DMA_SxNDTR达到零;外设请求传输终止;
1-2.直接模式：
--当DMA_SxFCR寄存器中的DMDIS值为0时，能控制不使用FIFO的阀值控制，此时，每完成一次外设到FIFO的数据传输后，
相应的数据立即被移出并存储在存储器内;

*** 存储器到外设：
*** 存储器到存储器:
** DMA使能：DMA_Cmd()
*** DMA开始传输：
--一旦使能了数据流，就可以响应连接到数据流的外设发出的任何DMA请求；
*** DMA传输完成：
1.在DMA流控制模式下：
--存储器到外设时，若DMA_SxNDTR计数器达到0;
--传输结束前数据流使能位EN被清零,并且（除存储器到存储器）所有剩余数据已从FIFO传输到存储器；
2.在外设流控制模式下：
--已经从外设生成了最后的外部突发请求，并且（除存储器到存储器）剩余的数据已经从FIFO传输到存储器；
--传输结束前数据流使能位EN被清零,并且（除存储器到存储器）所有剩余数据已从FIFO传输到存储器；
备注：该模式下，传输完成取决于FIFO中要传输到存储器的剩余数据；如果在非循环模式下配置数据流，当要传输的数据的数目达到0，
除非软件对数据流进行重新编程，并重新使能数据流，否则DMA会停止传输并且不再影响任何DMA请求。
3.一旦传输结束时，传输完成标志（TCIF）便会置1，如果使能了传输完成中断（TCIE），还会产生中断；
*** DMA传输暂停：
1.可以随时暂停DMA传输以供稍后重新开始，也可以再DMA传输结束前明确禁止此功能
2.直接禁止数据流的传输，以后不从停止点重新开始：只需将数据流使能位EN清零即可，此时可以查看DMA_SxNDTR中所记录的数据流停止时
剩余数据项的数目以确定禁止数据流之前已经传输了多少数据；
3.数据流在DMA_SxNDTR中要传输的剩余数据的项数目达到0之前暂停传输，以后要从该停止点开始传输：首先将数据流的使能位EN清零，然后读取
DMA_SxNDTR中所记录的数据流数目，然后更新外设或存储器地址以调整地址指针，然后使用刚刚读到的DMA_SxNDTR中的值来跟新DMA_SxNDTR寄存器
然后重新使能数据流就能从停止点开始传输；
*** DMA禁止传输：
--安全禁止外设的方法：首先关闭外设连接的数据流，然后等待EN位0；
** 获取当前还剩多少没传输的数据：DMA_GetCurrDataCounter()
--数据传输的量,由DMA流控值制器和外设流控制器配置，要传输数据的数量必须在使能数据流之前，写入到DMA_SxNDTR中;
--存储器到外设时，若DMA_SxNDTR计数器达到0，则传输完成；
** 设置当前还剩多少没有传输的数据:DMA_SetCurrDataCounter()
--数据传输的量,由DMA流控值制器和外设流控制器配置，要传输数据的数量必须在使能数据流之前，写入到DMA_SxNDTR中;
--存储器到外设时，若DMA_SxNDTR计数器达到0，则传输完成;
** 双缓冲模式设置：
--DMA_DoubleBufferModeConfig()
--DMA_DoublebuffermodeCmd()
--DMA_MemoryTargetConfig()
--DMA_GetCurrentMemoryTarget()
** DMA中断配置配置
DMA_GetCmdStatus()
DMA_GetFIFOSStatus()
DMA_GetFlagStatus()
DMA_ClearFlag()
DMA_ITConfig
DMA_GetITStatus()
DMA_ClearITPendingBit()
** 实践DMA处理串口数据：
1.当需要向RS232接口的传感器索要数据时，由CPU（可以用UCOSIII的任务实现）通
Blog creation time:[2017-09-05 二 08:52]
* DONE [#D] theme:定时器
 - State "DONE"       from "TODO"       [2017-09-05 二 09:32]
** 基研本究对象
1.计数器：CNT   
2.自动重装载寄存器:TIMx_ARR
3.定时器预分频器:TIMx_PSC (寄存器) 
备注:计数器始终以自动重装载寄存器的值作为参考起点或终点,在定时器预分频器分频后的时钟CK_CNT的控制下,自动加1或减一;
** 所有可能的时钟来源（查照定时器框图来理解）
1.内部RCC的APBx ----*2----> CK_INT ；(常规选择)
--当TIMx_SMCR中的SMS=000,且TIMx_CR1的CEN写1时,定时器预分频器的时钟就由CK_INT提供;
2.外部时钟模式1:外部输入引脚TIx;
--由TIMx_CHy(y=1,2,3)导出的TIEF_ED
--由TIMx_CHy(y=1,2,3)导出的TIEFP1,TIEFP2
--当TIMx_SMCR中的SMS=111时,此模式被选中
3.外部时钟模式2:外部触发输入(ETR)
--仅仅适用于TIM2,TIM3,TIM4;
--通过在TIMx_SMCR中写入ECE=1可以选择此模式
4.内部触发输入:ITRx(x=0,1,2,3)
--略
备注:由于在SystemInit里面初始化APB1时钟的分频因子为4,APB2时钟的分频因子为2,所以APB1的时钟为168/4=42MHZ,所以APB2的时钟为168/2=84MHZ
** 基本定时器:TIM6,TIM7
*** 时钟来源:暂且只讨论来自APBx
0.基本思路:APB1 ------*2---> CK_INT ----/TIM_ClockDivision-----> CK_PSC ----/(PSC[15:0]+1)-------> CK_CNT(计数器时钟频率)
1.基本定时器的时钟来自APB1 = 42MHZ;
2.内部时钟源时钟频率:CK_INT = APB1*2 = 42MHZ*2 = 84MHZ
3.计数器预分频器时钟频率:CK_PSC = CK_INT / TIM_ClockDivision(默认为1分频,其他分频在捕获模式中使用)
4.计数器时钟频率:CK_CNT = CK_PSC / (PSC[15:0]+1),其中,PSC[15:0]是预分频寄存器TIMx_PSC的预分频值,他作为计数器时钟频率的分频因子
*** 定时溢出时间计算公式解析
0.计数器溢出时间 = 计数器时钟周期 * 计数器预装载值;
1.公式:溢出时间:Tout = ARR * T(ck_psc) =  (arr+1) * ((psc+1)/CK_PSC) 
2.解析:(以向上计数为参考,向下计数同理)
--计数器CNT在计数器时钟CK_INT的作用下,每产生一个时钟,计数器CNT的值加一,即计数器的时钟周期直接决定着计数器多长时间后溢出;
--计数器计数的起点为0,终点为ARR,计数到达ARR时溢出,即,预装载值ARR直接决定着计数器多长时间后溢出;
--综上两点所述:定时器溢出时间 = 计数器预装载值ARR * 计数器时钟周期

--计数器时钟频率CK_CNT等于计数器预分频时钟频率CK_PSC除以计数器预分频因子PSC;
--即计数器时钟频率:CK_CNT = CK_PSC / (PSC[15:0] + 1)   
--综上两点所述:计数器时钟周期:T(ck_psc) = 1/CK_CNT = (PSC[15:0]+1)/CK_PSC = (psc+1)/CK_PSC 
公式得证!  

备注:在基于固件库开发的定时器初始化函数中,arr的值就是传给TIMx_ARR寄存器,psc的值就是传给TIMx_PSC寄存器
*** 计数模式:
1.向上计数:计数器CNT在CK_CNT时钟的控制下从0计数到ARR,然后重新从0开始计数并产生一个计数器溢出事件;
2.向下计数:计数器CNT在CK_CNT时钟的控制下从ARR计数到0,然后重新从ARR开始计数并产生一个计数器溢出事件;
3.向上/向下计数:计数器CNT在CK_CNT时钟的控制下从0计数到ARR-1,产生一个计数器溢出事件,然后ARR开始计数到1,产生溢出事件,然后再从0计数;
** 通用定时器:TIM2--TIM5;TIM9--TIM14
*** 时钟来源:暂且只讨论来自APBx
--TIM2--TIM5 和 TIM12--TIM14:
0.基本思路:APB1 ------*2---> CK_INT ----/TIM_ClockDivision-----> CK_PSC ----/(PSC[15:0]+1)-------> CK_CNT(计数器时钟频率)
1.时钟源来自APB1 = 42MHZ;
2.内部时钟源时钟频率: CK_INT = APB1*2 = 42MHZ*2 = 84MHZ; 
3.计数器预分频器时钟频率:CK_PSC = CK_INT / TIM_ClockDivision(默认为1分频,其他分频在捕获模式中使用);
4.计数器时钟频率:CK_CNT = CK_PSC / (PSC[15:0]+1),其中,PSC[15:0]是预分频寄存器TIMx_PSC的预分频值,他作为计数器时钟频率的分频因子

--TIM9--TIM11:
0.基本思路:APB2 ------*2---> CK_INT ----/TIM_ClockDivision-----> CK_PSC ----/(PSC[15:0]+1)-------> CK_CNT(计数器时钟频率)
1.时钟源来自APB2 = 84MHZ;
2.内部时钟源时钟频率:CK_INT = APB2*2 = 84MHZ*2 = 168MHZ;
3.计数器预分频器时钟频率:CK_PSC = CK_INT / TIM_ClockDivision(默认为1分频,其他分频在捕获模式中使用);
4.计数器时钟频率:CK_CNT = CK_PSC / (PSC[15:0]+1),其中,PSC[15:0]是预分频寄存器TIMx_PSC的预分频值,他作为计数器时钟频率的分频因子
*** 定时溢出时间计算公式解析
0.计数器溢出时间 = 计数器时钟周期 * 计数器预装载值;
1.公式:溢出时间:Tout = ARR * T(ck_psc) =  (arr+1) * ((psc+1)/CK_PSC) 
2.解析:(以向上计数为参考,向下计数同理)
--计数器CNT在计数器时钟CK_INT的作用下,每产生一个时钟,计数器CNT的值加一,即计数器的时钟周期直接决定着计数器多长时间后溢出;
--计数器计数的起点为0,终点为ARR,计数到达ARR时溢出,即,预装载值ARR直接决定着计数器多长时间后溢出;
--综上两点所述:定时器溢出时间 = 计数器预装载值ARR * 计数器时钟周期

--计数器时钟频率CK_CNT等于计数器预分频时钟频率CK_PSC除以计数器预分频因子PSC;
--即计数器时钟频率:CK_CNT = CK_PSC / (PSC[15:0] + 1)   
--综上两点所述:计数器时钟周期:T(ck_psc) = 1/CK_CNT = (PSC[15:0]+1)/CK_PSC = (psc+1)/CK_PSC 
公式得证!  

备注:
--CK_CNT = CK_PSC / (PSC[15:0] + 1)  <====>   ((psc+1)/CK_PSC)有着明确的意义,叫做计数器频率,其倒数称为计数器周期
--在基于固件库开发的定时器初始化函数中,arr的值就是传给TIMx_ARR寄存器,psc的值就是传给TIMx_PSC寄存器;
*** 计数模式:
1.向上计数:计数器CNT在CK_CNT时钟的控制下从0计数到ARR,然后重新从0开始计数并产生一个计数器溢出事件;
2.向下计数:计数器CNT在CK_CNT时钟的控制下从ARR计数到0,然后重新从ARR开始计数并产生一个计数器溢出事件;
3.向上/向下计数:计数器CNT在CK_CNT时钟的控制下从0计数到ARR-1,产生一个计数器溢出事件,然后ARR开始计数到1,产生溢出事件,然后再从0计数;
** 高级定时器:TIM1,TIM8
*** 时钟来源:暂且只讨论来自APBx
0.基本思路:APB2 ------*2---> CK_INT ----/TIM_ClockDivision-----> CK_PSC ----/(PSC[15:0]+1)-------> CK_CNT(计数器时钟频率)
1.高级定时器的时钟来自APB2 = 84MHZ;
2.内部时钟源:CK_INT = APB2*2 = 84MHZ*2 = 168MHZ;
3.计数器预分频器时钟频率:CK_PSC = CK_INT / TIM_ClockDivision(默认为1分频,其他分频在捕获模式中使用);
4.计数器时钟频率:CK_CNT = CK_PSC / (PSC[15:0]+1),其中,PSC[15:0]是预分频寄存器TIMx_PSC的预分频值,他作为计数器时钟频率的分频因子
*** 定时溢出时间计算公式解析
0.计数器溢出时间 = 计数器时钟周期 * 计数器预装载值;
1.公式:溢出时间:Tout = ARR * T(ck_psc) =  (arr+1) * ((psc+1)/CK_PSC) 
2.解析:(以向上计数为参考,向下计数同理)
--计数器CNT在计数器时钟CK_INT的作用下,每产生一个时钟,计数器CNT的值加一,即计数器的时钟周期直接决定着计数器多长时间后溢出;
--计数器计数的起点为0,终点为ARR,计数到达ARR时溢出,即,预装载值ARR直接决定着计数器多长时间后溢出;
--综上两点所述:定时器溢出时间 = 计数器预装载值ARR * 计数器时钟周期

--计数器时钟频率CK_CNT等于计数器预分频时钟频率CK_PSC除以计数器预分频因子PSC;
--即计数器时钟频率:CK_CNT = CK_PSC / (PSC[15:0] + 1)   
--综上两点所述:计数器时钟周期:T(ck_psc) = 1/CK_CNT = (PSC[15:0]+1)/CK_PSC = (psc+1)/CK_PSC 
公式得证!  

备注:在基于固件库开发的定时器初始化函数中,arr的值就是传给TIMx_ARR寄存器,psc的值就是传给TIMx_PSC寄存器
*** 计数模式:
1.向上计数:计数器CNT在CK_CNT时钟的控制下从0计数到ARR,然后重新从0开始计数并产生一个计数器溢出事件;
2.向下计数:计数器CNT在CK_CNT时钟的控制下从ARR计数到0,然后重新从ARR开始计数并产生一个计数器溢出事件;
3.向上/向下计数:计数器CNT在CK_CNT时钟的控制下从0计数到ARR-1,产生一个计数器溢出事件,然后ARR开始计数到1,产生溢出事件,然后再从0计数;

Blog creation time:[2017-09-05 二 08:53]
* WAITTING [#D] theme:将linux-kernel架构移植stm32上
1. 基本要求:
   1. 精简
   2. 提供裁剪功能的实现机制
   3. arch/arm/下面区分stm32不同型号的硬件
3. stm32基本流水线
   1. 烧录至硬件: sudo make burn
	  1. burn: vmstm32.bin 
	  2. ----@st-flash write $< 0x08000000
   2. 编译生成 vmstm32.bin 文件: make all
	  1. all: vmstm32.bin
   3. 产生 vmstm32.bin 文件: vmstm32.bin
      1. vmstm32.bin: vmstm32.elf
      2. ----@arm-none-eabi-objcopy -O binary -S $< $@
   4. 产生 vmstm32.elf 文件: vmstm32.elf
      1. CFLAGS += -mcpu=cortex-m4 -mthumb -Wall   LFLAGS += -mcpu=cortex-m4 -mthumb  
      2. vmstm32.elf: $(OBJS)
	  3. ----@arm-none-eabi-gcc $(LFLAGS) $^ -T stm32f4-flash.ld -o $@
	  4. ----@arm-none-eabi-size $@
   5. 产生 $(OBJS): $(OBJS)
	  1. %.o: %.S
	  2. ----@arm-none-eabi-gcc $(CFLAGS) -c $< -o $@
      3. %.o: %.c
	  4. ----@arm-none-eabi-gcc $(CFLAGS) $(DEFS) $(INCS) -c $< -o $@
   6. 清除编译: make clean
      1. clean:
      2. ----@rm -f $(OBJS) blink.bin blink.elf
Blog creation time:[2017-10-26 四 08:37]

* WAITTING [#D] theme:内核目录架构
1. 顶层Makefile: torvalds-linux/linux/Makefile
   1. 决定torvalds-linux/linux/下面,哪些子目录被编译进内核
2. 体系结构相关的Makefile: torvalds-linux/linux/$(ARCH)/Makefile
   1. 决定torvalds-linux/linux/$(ARCH)/下面哪些文件,目录被编译进内核
3. 公用规则的Makefile: torvalds-linux/linux/scripts/Makefile.*
4. 通用Makefile: 每级子目录下都有一个 Makefile
   1. 决定所在目录下,哪些文件被编译进内核
   2. 决定所在目录下,哪些文件被编译成模块
   3. 决定进入哪些子目录继续调用它们的Makefile
5. 配置文件.config: 在配置内核是生成, 所有的Makefile都根据它来决定使用哪些文件

Blog creation time:[2017-10-25 三 16:53]

--kbuild将所有与编译过程相关的共用规则和变量都提取到scripts 目录下的Makefile.build中,具体的子目录下的 Makefile 文件则可以编写的非常简单与直接

--用 obj-* 连接的Objects 在指明的文件夹中被用作模块或者综合进built-in.o，也有可能被列出的objects 将会被包含进一个库,lib.a

--所有用lib-y 列出的objects 在那个文件夹中被综合进单独的一个库

--列在obj-y 且 附加列在lib-y 中的Objects 将不会被包含在库中

--对于被连接在lib-m 中，连续的objects 将会被包含在lib.a 中

--kbuild makefile 可能列出文件用作built-in ，并且作为库的一部分。因此，同一个文件夹可能包含一个built-in.o 和lib.a 文件  

--lib-y 的使用方法通常被限制在lib/ 和arc/*/lib 中
*** Makefile
--路径：位于linux kernel源码的顶层目录，该Makefile也就是顶层Makefile

--顶层的Makefile也叫做Kernel Makefile

--顶层Makefile文件负责产生两个主要的程序：vmlinux (内核image)和模块

--主要用于指定编译Linux Kernel 目标文件（vmlinux ）和模块（module ）路径

--顶层Makefile文件根据内核配置，通过递归编译内核代码树子目录建立这两个文件。

--顶层Makefile文件文本一个名为 arch/$(ARCH)/Makefile的机器体系Makefile文件。

--机器体系Makefile文件为顶层Makefile文件提供与机器相关的信息。

--根据.config文件决定了内核根目录下那些文件、子目录被编译进内核
*** ARCH/$(ARCH)/Makefile 
--系统对应平台的Makefile

--Makefile 会包含这个文件来指定平台相关信息

--根据.config文件，决定了ARCH/$(ARCH) 目录下 那些文件、子目录被编译进内核
*** scripts/Makefile.build: 
--被顶层Makefile所调用

--与各级子目录的Makefile合起来构成一个完整的Makefile文件，定义built-in.o、.lib以及目标文件.o的生成规则

--这个Makefile文件生成了子目录的.lib、built-in.o以及目标文件.o

*** scripts/Kbuild.include:
--被Makefile.build所调用

--定义了一些函数，如if_changed、if_changed_rule、echo-cmd
*** scripts/Makefile.clean
--被顶层Makefile所调用

--用来删除目标文件等
*** scripts/Makefile.lib
--被Makefile.build所调用
--主要是对一些变量的处理，比如说在obj-y前边加上obj目录
*** .config
--位于linux内核的根目录下

--产生自来自配置过程

--被顶层的Makefile包含

--配置过程产生.config文件

--.config又产生auto.conf以及autoconf.h文件
*** KBuild Makefile
--从Linux 内核2.6 开始，Linux 内核的编译采用Kbuild 系统 

--大多的Kbuild 文件的名字都是Makefile 。为了与其他Makefile 文件相区别，你也可以指定Kbuild Makefile 的名字为 Kbuild

--如果“Makefile ”和“Kbuild ”文件同时存在，则Kbuild 系统会使用“Kbuild ”文件,linux内核中,Kbuild Makefile 就是各个子目录的Makefile 

--Kbuild 系统使用Kbuild Makefile 来编译内核或模块

--每个子目录下都有一个KBuild Makefile，作用就是 指定当前目录下的文件，哪些被编译进当前目录的built-in.o、那些被编译成模块、那些不编译

--当顶层 Makefile 被解析完成后，Kbuild 会读取相关的Kbuild Makefile 进行内核或模块的编译

--Kbuild Makefile 有特定的语法指定哪些编译进内核中、哪些编译为模块、及对应的源文件是什么

--Kbuild Makefile 的一个最主要功能就是指定编译什么，这个功能是通过下面两个对象指定的obj-? 和xxx-objs  
例1：
     obj-y += foo.o 
     obj-m += abc.o 
实际：obj-$(CONFIG_DM9000) += dm9000.o，CONFIG_DM9000 是y 还是m取决于配置过程

例2：
	如果内核模块是通过几个源文件编译而成的，此时Kbuild需要知道编译模块时是基于哪些目标文件的,因此需要设置一个$(<module_name>-objs)变量来告诉编译器
    obj-$(CONFIG_ISDN) += isdn.o
    isdn-objs := isdn_net_lib.o isdn_v110.o isdn_common.o
由于obj-$(CONFIG_ISDN)是由isdn_net_lib.o isdn_v110.o isdn_common.o这三个目标文件编译而成的，所以，需要定义isdn-objs

*** scripts/kconfig/Makefile
--顶层Makefile调用： include scripts/kconfig/Makefile ，用于指定目标

--顶层Makefile调用： include scripts/kconfig/Makefile ，生成auto.conf autoconf.h auto.conf.cmd
*** .config文件
.config文件在进行内核编译时（make uImage）生成了include/config/auto.conf和include/linux/autoconf.h
Linux的内核配置，就是为了生成.config文件。因为在编译时需要用.config文件生成其他相关配置文件。我们的配置项大多是例如CONFIG_XXXDRIVER，这里的XXXDRIVER指的是各种驱动。我们需要告诉内核，这些驱动是编译进内核，还是编译成模块。通过查找CONFIG_XXXDRIVER，我们可以发现，它出现在四个地方：

　　1>C源代码

　　2>子目录Makefile:drivers/XXX/Makefile

　　3>include/config/auto.conf

　　4>include/linux/autoconf.h
里首先说明：.config文件在进行内核编译时（make uImage）生成了include/config/auto.conf和include/linux/autoconf.h。
通过查看C源代码我们发现CONFIG_XXXDRIVER是一个宏定义，等于一个常量。在include/linux/autoconf.h中宏定义CONFIG_XXXDRIVER为一个常量，可能是0或1。
那么现在有一个问题，就是CONFIG_XXXDRIVER到底被编译进内核还是编译成一个模块呢？这在C语言中是无法进行区分的，这种区分体现在哪里呢？这种区分体现在子目录的Makefile文件中。
在子目录的Makefile中，若有 obj -y += XXX.o则表示XXX.c被编译进内核；obj -m +=XXX.o则表示XXX被编译成模块，为XXX.ko。include/config/auto.conf文件则是对CONFIG_XXXDRIVER进行赋值，
为y时表示编译进内核，为m时表示编译成独立模块

--在Linux内核里，每个子目录都有一个makefile，它被称作Kbuilt-makefile，它将当前目录的文件编译成built-in.o、以及库文件、模块文件。
然后顶层Makefile里指定这些built-in.o的路径，将它们连接在一起

--通过内核配置操作产生.config文件，顶层Makefile文件读取该文件的配置。

Blog creation time:[2017-09-04 一 15:17]

** 入口：
1.顶层Makefile---- 指定目标-----include scripts/kconfig/Makefile
如在终端中执行配置命令make nitrogen6x_defconfig
%config: scripts_basic outputmakefile FORCE
    $(Q)mkdir -p include/linux include/config
    $(Q)$(MAKE)$(build)=scripts/kconfig $@

2.auto.conf autoconf.h auto.conf.cmd的生成----指定目标-----include scripts/kconfig/Makefile
include/config/%.conf:$(KCONFIG_CONFIG)include/config/auto.conf.cmd
    $(Q)$(MAKE)-f$(srctree)/Makefile silentoldconfig

将在顶层Makefile中递归到上述1中的%config规则，所以，其最终还会包含scripts/kconfig/Makefile

3. 目标编译和链接----不指定目标-----include 各个build目标下的Makefile
$(vmlinux-dirs): prepare scripts
        $(Q)$(MAKE) $(build)=$@

4. 模块----模块建构中单独讨论
$(module-dirs):crmodverdir$(objtree)/Module.symvers
    $(Q)$(MAKE)$(build)=$(patsubst _module_%,%,$@)

modules:$(module-dirs)
    @$(kecho)'  Building modules, stage 2.';
    $(Q)$(MAKE)-f$(srctree)/scripts/Makefile.modpost

5. 单目标----不指定目标
%.o:%.c prepare scripts FORCE
    $(Q)$(MAKE)$(build)=$(build-dir)$(target-dir)$(notdir $@)

6. 子目录递归----不指定目标-----include递归的子目录下Makefile
scripts/Makefile.build
$(subdir-ym):
    $(Q)$(MAKE)$(build)=$@
** 暂存
--

** 基本流程
--在scripts/Kbuild.include中有一条规则：build := -f $(srctree)/scripts/Makefile.build obj

--在scripts/Makefile.build中：

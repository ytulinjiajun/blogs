* WAITTING [#C] Theme:cmake-variables                                :@Cmake:
** Variables that Provide Information
   1. <<CMAKE_CURRENT_LIST_DIR>>
      1. 含义: 当前正在处理的列表文件(CMakelists.txt)所在的目录路径
      2. 动态变量
      3. 如: /home/ljj/workspace/test5/dir/
   2. <<CMAKE_CURRENT_LIST_FILE>>
      1. 含义: 当前正在处理的列表文件(CMakeLists.txt)
      2. 动态变量
      3. 如:  /home/ljj/workspace/test5/dir/CMakeLists.txt
   3. <<PROJECT-NAME_BINARY_DIR>>
      1. 作用: 该变量的值是命令project(<PROJECT-NAME> ......)中指定的项目名的顶层 binary directory 目录的路径
      2. 使用场合: 当使用add_subdirectory()命令来连接几个工程时,该变量就十分有用
      3. 个人建议: PROJECT_BINARY_DIR指代的对象没有该变量指代的清楚明了,建议使用该变量
   4. <<PROJECT-NAME_SOURCE_DIR>>
      1. 作用: 该变量的值是命令project(<PROJECT-NAME> ......)中指定的项目名的顶层 source directory 目录的路径
      2. 使用场合: 当使用add_subdirectory()命令来连接几个工程时,该变量就十分有用
      3. 个人建议: PROJECT_SOURCE_DIR指代的对象没有该变量指代的清楚明了,建议使用该变量
   5. <<PROJECT-NAME_VERSION>>
      1. 作用:  该变量用于存储命令project(<PROJECT-NAME>  [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]......)中指定的VERSION
      2. 备注: cmake_policy
   6. <<PROJECT-NAME>_VERSION_MAJOR>>
      1. 作用: 存储<PROJECT-NAME>_VERSION中的第1个号码<major>
   7. <<PROJECT-NAME_VERSION_MINOR>>
      1. 作用: 存储<PROJECT-NAME>_VERSION中的第2个号码<minor>
   8. <<PROJECT-NAME>_VERSION_PATCH>>
      1. 作用: 存储<PROJECT-NAME>_VERSION中的第3个号码<patch> 
   9. <<PROJECT-NAME>_VERSION_TWEAK>>
      1. 作用: 存储<PROJECT-NAME>_VERSION中的第4个号码<tweak>
   10. <<PROJECT_DESCRIPTION>>
       1. 作用: 存储project命令中<DESCRIPTION>参数,项目描述信息
   11. <<PROJECT_NAME>>
       1. 作用: 该变量的值是命令project(<PROJECT-NAME> ......)中指定的项目名<PROJECT-NAME>
       2. 使用场合: 可以通过查询该变量得知项目的名字
** Variables that Change Behavior
*** <<BUILD_SHARED_LIBS>>
  1. 该变量如果设置为ON,则在全局范围内,[[ add_library]]() 默认创建的所有库均是 SHARD 库,除非明确的指出要创建一个STATIC库
  2. 该变量经常在项目中最为一个 [[option]]() 以便项目的每一个用户能够决定它们是否想要使用静态库或者动态库构建系统
*** <<CMAKE_BUILD_TYPE>>
  1. 作用: 指定 build tree 的 build type 
  2. 可能的值是: empty, Debug, Release, RelWithDebInfo and MinSizeRel
  3. 这个变量仅仅在 single-configuration generators 时才有意义
  4. 有很多预配置属性和变量,诸如 [[CMAKE_C_FLAGS_<CONFIG>]] , CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL]
  5. 例如,如果配置了某 build tree 的 build type 为Debug, CMake 会将 CMAKE_C_FLAGS_DEBUG 添加到 [[CMAKE_C_FLAGS]] 中去
*** <<CMAKE_FIND_ROOT_PATH>>
    1. 在交叉编译时,该变量是十分有用的,比如,在给一个ARM处理器的移动设备做交叉编译，其中需要寻找libjpeg.so
    2. 假如使用find_package(JPEG) 在没有设置该变量的前提下,返回的是/usr/lib/libjpeg.so
    3. 这是有问题的，因为找到的这个so库只是给你的宿主机系统(例如一个x86的Ubuntu主机)服务的，不能用于arm系统
    4. 所以你需要告诉CMake去其它地方去查找,该变量就是干这个事的,它在文件系统层次给出了一个用于搜索的根
    5. 实际上, 该变量提供的是一个搜索路径的前缀,对于 find_path 来说,最终的搜索路径是 前缀/include, 对于find_package来说,最终的搜索路径是 前缀/lib
    6. 比如 [[set]](CMAKE_FIND_ROOT_PATH /home/ljj/stm32/embi-arm-linux-xx)
    7. 默认情况下,CMake首先会到/home/ljj/stm32/embi-arm-linux-xxx/usr/lib或者/home/ljj/stm32/embi-arm-linux-xx/lib等子目录下面搜索所有find_*命令给出的条目
    8. 如果没有找到(且设置了 [[find_package(BOTH)]] 的情况下),可以接着到 [[CMAKE_SYSROOT]] 列出的路径下搜索, 如果还是没有找到的话就到宿主机的相关目录下搜索
    9. 默认这个变量是空,交叉编译中应当对该变量进行设置
    10. 配置该变量的同时还应配置[[CMAKE_FIND_ROOT_PATH_MODE_PROGRAM]] , [[CMAKE_FIND_ROOT_PATH_MODE_LIBRARY]] , [[CMAKE_FIND_ROOT_PATH_MODE_INCLUDE]] , [[CMAKE_FIND_ROOT_PATH_MODE_PACKAGE]]
    11. 参考 [[Cross Compiling]]  [[CMAKE_SYSROOT]] 
*** <<CMAKE_FIND_ROOT_PATH_MODE_LIBRARY>>
  1. 该变量用于控制 [[find_library]]()命令是否可以在 [[CMAKE_FIND_ROOT_PATH]] , [[CMAKE_SYSROOT]]给出的路径下面搜索
  2. 如果设置为ONLY,那么,find_library() 仅仅只能在 CMAKE_FIND_ROOT_PATH  下面给出的路径中进行搜索
  3. 如果设置为NEVER,那么, find_library() 将无法在 CMAKE_FIND_ROOT_PATH 下面给出的路径中搜索,只能在宿主机相应的目录下进行搜索
  4. 如果设置为BOTH,那么,find_library() 可以在 CMAKE_FIND_ROOT_PATH 下面以及宿主机相应的目录下面进行搜索
*** <<CMAKE_FIND_ROOT_PATH_MODE_INCLUDE>>
    1. 该变量用于控制 [[find_file]](), [[find_path]]() 命令是否可以在 [[CMAKE_FIND_ROOT_PATH]] , [[CMAKE_SYSROOT]] 给出的路径下面搜索
    2. 如果设置为ONLY,那么,find_file(),find_path() 仅仅只能在 CMAKE_FIND_ROOT_PATH  下面给出的路径中进行搜索
    3. 如果设置为NEVER,那么, find_file(),find_path() 将无法在 CMAKE_FIND_ROOT_PATH 下面给出的路径中搜索,只能在宿主机相应的目录下进行搜索
    4. 如果设置为BOTH,那么,find_file(),find_path() 可以在 CMAKE_FIND_ROOT_PATH 下面以及宿主机相应的目录下面进行搜索
*** <<CMAKE_FIND_ROOT_PATH_MODE_PACKAGE>>
  1. 该变量用于控制 [[find_package]]()命令是否可以在 [[CMAKE_FIND_ROOT_PATH]] , [[CMAKE_SYSROOT]]给出的路径下面搜索
  2. 如果设置为ONLY,那么,find_package() 仅仅只能在 CMAKE_FIND_ROOT_PATH  下面给出的路径中进行搜索
  3. 如果设置为NEVER,那么, find_package() 将无法在 CMAKE_FIND_ROOT_PATH 下面给出的路径中搜索,只能在宿主机相应的目录下进行搜索
  4. 如果设置为BOTH,那么,find_package() 可以在 CMAKE_FIND_ROOT_PATH 下面以及宿主机相应的目录下面进行搜索
*** <<CMAKE_FIND_ROOT_PATH_MODE_PROGRAM>>
  1. 该变量用于控制 [[find_program]]()命令是否可以在 [[CMAKE_FIND_ROOT_PATH]] , [[CMAKE_SYSROOT]]给出的路径下面搜索
  2. 如果设置为ONLY,那么,find_program() 仅仅只能在 CMAKE_FIND_ROOT_PATH  下面给出的路径中进行搜索
  3. 如果设置为NEVER,那么, find_program() 将无法在 CMAKE_FIND_ROOT_PATH 下面给出的路径中搜索,只能在宿主机相应的目录下进行搜索
  4. 如果设置为BOTH,那么,find_program() 可以在 CMAKE_FIND_ROOT_PATH 下面以及宿主机相应的目录下面进行搜索
*** <<CMAKE_INCLUDE_PATH>>
*** <<CMAKE_INSTALL_PREFIX>>
  1. 该变量被命令[[install]]()使用到
  2. 当 make install 被调用 或者 使用命令install()时,这个变量的目录所示的路径将会被安装路径的后面
  3. 在UNIX下,这个变量默认是/usr/local,在window下,默认是c:/Program Files/${PROJECT_NAME}
  4. 该变量的使用方法: cmake -DCMAKE_INSTALL_PREFIX=usr/ .. 此时 make DESTDIR=/home/john install 后,软件的安装路径就是usr/home/john
  5. 备注: 当然了,该变量也可以在CMakeLists.txt中使用set进行配置,原则是如果用户在命令行使用-D定义了默认路径的话,就使用命令行的路径,否则就使用set设置的路径
  6. 通过判断 [[CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT]] 的值实现该变量的配置:
  7. if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  8. [[set]](CMAKE_INSTALL_PREFIX "/my/default" CACHE PATH "..." FORCE)
*** <<CMAKE_POLICY_DEFAULT_CMP_NNNN>>
        1. 作用: 存储某个policy的默认配置(OLD or NEW)
        2. 更改: cmake_policy(SET CMP0048 NEW)
        3. 说明: <NNNN>代表某个policy的编号,如0048,该编号具体是什么含义,参见cmake-policies
** Variables that Describe the System
   1. <<CMAKE_SYSTEM_NAME>>
      1. [[目标机]]上运行的操作系统的名称,比如Linux,Android,如果你的嵌入式平台没有相关OS你即需要写成”Generic”
      2. 这是在toolchain脚本中必须要设置的变量,只有当CMAKE_SYSTEM_NAME这个变量被设置了，CMake才认为此时正在交叉编译
      3. 它会额外设置一个变量[[CMAKE_CROSSCOMPILING]]为TRUE
      4. 参考 [[CMAKE_TOOLCHIAIN_FILE]] 
   2. <<CMAKE_SYSTEM_PROCESSOR>>
      1. 代表[[目标机]]的硬件架构，例如ARM，X86
      2. 这个是可选项，但是在移动开发中很重要
** Variables that Control the Build
   1. <<CMAKE_EXE_LINKER_FLAGS>>
      1. 作用: 存储创建可执行文件时用到的链接flags
      2. 这个变量中的flags将会在创建一个可执行文件时被使用
   2. <<CMAKE_POSITION_INDEPENDENT_CODE>>
	    1.该变量被用于初始化所有目标的  [[POSITION_INDEPENDENT_CODE]] 属性
      1. 该变量的值也被用于 [[try_compile]]()
   3. <<EXECUTABLE_OUTPUT_PATH>>
      1. 作用: 重新指定最终二进制目标的路径
      2. 设置: set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
      3. 备注: 一个重要的问题是,配置这个变量的这条指令应当写在哪个CMakeLists.txt中呢,其基本原则是在哪里 [[ADD_EXECUTABLE]] 或 [[ADD_LIBRARY]],如果需要改变目标存放路径,就在哪里加入上述的定义
      4. 相关: [[add_subdirectory]]()
   4. <<LIBRARY_OUTPUT_PATH>>
      1. 作用: 重新指定最终生成的共享库的路径
      2. 设置: set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
** Variables for Languages
   1. <<CMAKE_<LANG>_COMPILER>>
      1. <<CMAKE_C_COMPILER>>
      2. 参考 [[Languages]]
   2. <<CMAKE_<LANG>_COMPILER_ID>>
      1. <<CMAKE_C_COMPILER_ID>>
      2. A short string unique to the compiler vendor
      3. 比如: set(CMAKE_C_COMPILER "ARMCC = ARM Compiler (arm.com)")
      4. 参考 [[Variables and Properties]]
   3. <<CMAKE_<LANG>_FLAGS>>
      1. <<CMAKE_C_FLAGS>>: 存储c编编译过程中的所有flags
         1. 可以通过[[add_compile_options]]命令以及[[add_definitions]]设置flags,但是不推荐,因为这两个命令设置的值对所有的编译器都有效.推荐使用set,它只对指定的编译器有效
      2. 该变量一旦定义,则[[CFLAGS]]将会被忽略,因此该变量的值在没有赋值之前为空
      3. 建议使用set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall")这种方式将CMAKE_C_FLAGS 设置为 -O3 -Wall (注意不是追加)
      4. 参考 [[Variables and Properties]]
** Variables for CTest
** Variables for CPack
Blog creation time:[2017-11-08 三 09:24]

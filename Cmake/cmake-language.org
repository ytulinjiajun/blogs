* Organization
** Directories
** Scripts
** Modules
* Syntax
** Encoding
** Source Files
** Command Invocations
** Command Arguments
*** Bracket Argument
*** Quoted Argument
*** Unquoted Argument
** Escape Sequences
** <<Variable References>>
- 变量引用的格式为$ {variable_name}，并在引用的参数或非引用的参数中进行评估

- 变量引用被变量的值替换，或者如果变量未被设置，则由空字符串替换

- 变量引用可嵌套，并从内向外进行计算，例如， ${outer_${inner_variable}_variable}

- 环境变量引用的形式为$ENV {VAR}，并在与普通变量引用相同的上下文中进行计算
** Comments
*** Bracket Comment
*** Line Comment
* Control Structures
** Conditional Blocks
** Loops
** Command Definitions
* <<Variables>>
1. 在 cmake 的语法中,变量是基本的存储单元
2. 变量的值总是字符串类型
3. [[set]]() 和 [[unset]]() 命令用于设置以及清除变量的值(当然了,也有其他的一些命令含有修改变量值的语义)
4. 变量名是大小写敏感的,几乎可以由任何文本组成,但是建议只使用_和-来组合变量
5. 变量有动态的范围,每个使用set或者unset赋值的变量实际上是在当前范围内创建了一个绑定,当前范围指:
   1. Function Scope: 由 [[function]]() 命令定义的一个函数, 这个函数内部涉及的变量,只在函数内部以及函数的嵌套调用中可见
   2. Directory Scope: 源码树中的每个目录都有自己的变量绑定,在处理当前目录的CMakeLists.txt文件之前，CMake会复制其父目录中定义的所有变量绑定
   3. Persistent <<Cache>>(持久缓存):
      1. CMake存储一组单独的“缓存”变量或“缓存条目”，它们的值在项目构建树中的多个运行中保持不变。
      2. 高速缓存条目具有仅由显式请求修改的独立绑定范围，例如由[[set]]（）和unset（）命令的CACHE选项修改
6. 变量的引用过程:
   1. 当计算 [[Variable References]] 时，CMake首先搜索函数调用堆栈（如果有的话）进行绑定，然后回退到当前目录范围中的绑定（如果有的话）
   2. 如果找到“set”绑定，则使用它的值。如果找到“unset”绑定，或者没有找到绑定，CMake就会搜索一个缓存条目
   3. 如果找到缓存条目，则使用其值。否则，变量引用计算为空字符串。
* <<Lists>>


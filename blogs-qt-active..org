* blogs-qt-active
** DONE [#D] theme:qt相关网址									  :@Blog:@Qt:
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
--软件下载:https://download.qt.io/official_releases/qt/
--文档:https://doc.qt.io
Blog creation time:[2017-09-05 二 08:41]
** DONE [#D] theme:宏观概述qt									  :@Blog:@Qt:
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
*** 历史
--qt是1991年奇趣科技开发的跨平台C++图形用户界面运用程序开发框架
--2000年,嵌入式版本的qt发布
--2008年奇趣科技被诺基亚以1,5亿美元收购
--无论是qt还是MFC都是计算机图形框架的C++的解决方案
--qt的运用范围:航天航空,汽车信息娱乐,家庭影院,视频电话,医疗,石油天然气,视觉效果

*** 基础知识
--QObject类是所有QT对象的基类
--QPaintDevice类是所有绘制对象的基类
--QWidget继承自QObject类和QPaintDevice类型,是所有用户界面对象的基类

--QApplication a(argc,argv):新建一个QApplication类对象,并以argc,argv调用构造函数初始化该对象
-->该对象用于管理运用程序的控制流,每个QtWidget程序都要有一个QApplacation对象,对于non-QWidget运用程序,使用QGuiApplication替代,因为non-QWidget运用程序没有依赖于QtWidget类库
-->由于QT程序可以接收命令行参数,所以,需要argc和argv这两个参数

--return a.exec():调用QApplication类对象a的成员函数exec(),让a进入事件循环
-->调用该函数以后,事件循环就可以从窗口系统中接收到被触发的事件,然后将事件分发到运用程序相应的窗口中去
-->在调用该函数之前,与用户交互的接口API是不能被使用的,像QMessageBox这样的Modal widgets除外,因为在Modal widgets在开启本地事件循环之前调用了exec()

学习QT的基本方法
--掌握C++语言
--掌握QT提供的所有部件
--学会查找文档
--多使用官方提供的实例代码
--使用匈牙利标记法

--对象查看器:列出界面上所有部件的对象名称和父类,以树形结构显示所属关系,可单击对象来选中该部件

--属性编辑器:显示部件的常用属性,可以更改属性值,这些属性的排列顺序是:从基类继承的属性,从父类继承的属性,自己的属性

--动作编辑器与信号槽编辑器:可以对相应的对象的内容进行编辑

--常用的功能图标:从左到右
-->窗口部件编辑模式:默认模式
-->信号槽编辑模式
-->伙伴编辑模式
-->TAB顺序编辑模式
-->后面的几个用来实现添加布局管理器以及调整大小等功能
Blog creation time:[2017-09-05 二 08:43]
** DONE [#D] theme:常用快捷键									  :@Blog:@Qt:
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
--水平布局:C + H
--垂直布局:C + L
--预览:shift + alt + r
--多选:按住CTRL不放,点选对象 
Blog creation time:[2017-09-05 二 08:43]
** DONE [#D] theme:窗口部件学习									  :@Blog:@Qt:
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
*** 选项卡:QTabWidget
--一个tab widget由一个tab bar和page area组成
--tab bar里面的每个tab都有一个与之相关的page area,只有选中tab bar中的某一个tab时,与之相关的page area才会显示出来,其他的page area会隐藏
*** 标签:QLabel
--QLabel类在创建对象时,根据复制初始化的值,调用不同的构造函数,该类有2个构造函数
--可以将一个类对象(QDailog w)的地址(&w)复制给QLabel类对象(QLabel label(&w)),表示w是label的父类
*** 单行编辑器:QLineEdit
*** 多行编辑器:QTextEdit
*** 组框:QGroupBox
*** 表格:QTabWidget
*** 按钮:QPushButton
*** 复选框:QCheckBox
*** 单选框:QRadioButton
*** 水平布局:QHBoxLayout
*** 垂直布局:QVBoxLayout
Blog creation time:[2017-09-05 二 08:44]
** DONE [#D] theme:qt安装与卸载									  :@Blog:@Qt:
	- State "DONE"       from "TODO"       [2017-09-05 二 09:30]
--操作系统:Ubuntu16.04  64位
--QT版本号:最新版,5.9.1(2017-6-30)
--安装步骤:
-->下载:在上面给出的网址中下载qt-opensource-linux-x64-5.9.1.run
-->升级系统:sudo apt upgrade 
-->为下载的qt包添加执行权限:chomd +x qt-opensource-linux-x64-5.9.1.run
-->运行安装包: ./qt-opensource-linux-x64-5.9.1.run
-->依照步骤安装,其中建议安装在家目录,软件选项可以全部添加
-->安装完毕
-->修改配置:
-->为了随处可以使用qmake命令,需要更改qt的文件:sudo emacs /usr/lib/x86_64-linux-gnu/qt-default/qtchooser/default.conf
将该文件里面的内容改为:
/home/ljj/Qt5.9.1/5.9.1/gcc_64/bin
/home/ljj/Qt5.9.1
保存退出,并输入qmake验证,如果没有报错,就代表配置成功了
-->QT是以C/C++为依托的,用Python也可以,先检查一下有没有gcc/g++编译器,没有的话需要安装
-->如果系统没有自带openGL库,在做带有3D效果的界面时会报错,所以需要手动安装openGL
sudo apt install mesa-common-dev
sudo apt install libglu1-mesa-dev -y
-->添加环境变量:emacs ~/.profile  定义一个变量QT_PATH="/home/ljj/Qt5.9.1/Tools/QtCreator"  将$QT_PATH/bin添加到下面的PATH中去

-->qtcreater默认不支持正文输入法,原因是缺少fcix-qt5的支持
目的:关键是要编译出共享库libfcitxplatforminputcontextplugin.so, 这是个动态库,所以是因人而异的,所以即使你是和我一个版本的操作系统,我也不能将我的库共享给你,
你得自己编译,所以网上好多教程在文章中共享的libfcitxplatforminputcontextplugin.so库是不可用的

--设置qmake的环境变量：PATH="$PATH:/home/ljj/Qt5.9.1/5.9.1/gcc_64/bin"

--编译fcitx-qt需要cmake，安装cmake命令:sudo apt-get install cmake

--安装几个依赖文件:sudo apt-get install fcitx-libs-dev libgl1-mesa-dev libglu1-mesa-dev libxkbcommon-dev

--下面提供两个特殊依赖文件,出错时需要安装(如果第一个失败,尝试第二个)
--> https://launchpad.net/ubuntu/+source/extra-cmake-modules/1.4.0-0ubuntu1 下载 extra-cmake-modules_1.4.0.orig.tar.xz
--> https://launchpad.NET/ubuntu/+source/extra-cmake-modules/5.18.0-0ubuntu1 下载 extra-cmake-modules_5.18.0.orig.tar.xz
备注:我两个都解压安装了
cd extra-cmake-modules-1.4.0
cmake .
make
sudo make install

--下载fcitx-libs源码:git clone git@github.com:fcitx/fcitx-qt5.git
--编译:
cd fcitx-qt5  
cmake .  
make
sudo make install
--->大功告成,已经成功生成了 libfcitxplatforminputcontextplugin.so,注意,其目录为/home/ljj/Qt5.9.1/5.9.1/gcc_64/plugins/platforminputcontexts/

最后把编译得到 libfcitxplatforminputcontextplugin.so 拷贝到:
Qt5.5安装目录的 Tools/QtCreator/bin/plugins/platforminputcontexts
Qt5.6的目录是 Tools/QtCreator/lib/Qt/plugins/platforminputcontexts
Qt9.9的目录是 Tools/QtCreator/lib/Qt/plugins/platforminputcontexts

注意:生成了 libfcitxplatforminputcontextplugin.so 其实就已经成功了,如果到了这一步,还不行,那查看一下 libfcitxplatforminputcontextplugin.so是否具有执行权限,没有的话需加上执行权限

-->卸载:cd /home/ljj/Qt5.9.1   ./MaintenanceTool
Blog creation time:[2017-09-05 二 08:42]

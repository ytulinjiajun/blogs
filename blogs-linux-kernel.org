* blogs-linux-kernel
** WAITTING [#D] Theme:源码分析							  :@Blog:@Kernel:
  all: vmlinux
  
  vmlinux: scripts/link-vmlinux.sh vmlinux_prereq $(vmlinux-deps) FORCE (999)
  ----+$(call if_changed,link-vmlinux)

备注:
1. @@@@@表示已经追踪到文件真实路径的级别
2. %%%%%表示已超出顶层Makefile文件
3. ||||||||||表示分隔小节
*** scripts/link-vmlinux.sh @@@@@
*** vmlinux_prereq
1. PHONY += vmlinux_prereq (975)
2. vmlinux_prereq: $(vmlinux-deps) FORCE  (976)
   1. ifdef CONFIG_HEADERS_CHECK
   2. ----$(Q)$(MAKE) -f $(srctree)/Makefile headers_check
   3. endif
   4. 
   5. $(srctree)
	  1. # building in the source tree
	  2. ifeq ($(KBUILD_SRC),)
      3. ----srctree := .   (200)
      4. else
      5. ----ifeq ($(KBUILD_SRC)/,$(dir $(CURDIR)))
      6. --------srctree := ..
      7. ----else
      8. -------srctree := $(KBUILD_SRC)  (206)
      9. ---endif
      10. endif
	  11. 
	  12. objtree		:= .   (209)
	  13. src		:= $(srctree)
	  14. obj		:= $(objtree)
	  15. 
	  16. VPATH		:= $(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))
	  17. 
	  18. export srctree objtree VPATH
   6. 
   7. headers_check
	  1. PHONY += headers_check
	  2. headers_check: headers_install
	  3. ----$(Q)$(MAKE) $(hdr-inst)=include/uapi dst=include HDRCHECK=1
	  4. ----$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi $(hdr-dst) HDRCHECK=1
	  5. 
	  6. headers_install
	     1. headers_install: __headers
	     2. ----$(if $(wildcard $(srctree)/arch/$(hdr-arch)/include/uapi/asm/Kbuild),,  \
	     3. $(error Headers not exportable for the $(SRCARCH) architecture))
	     4. ----$(Q)$(MAKE) $(hdr-inst)=include/uapi dst=include
	     5. ----$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi $(hdr-dst)
		 6. 
		 7. __headers
		    1. __headers: $(version_h) scripts_basic uapi-asm-generic archheaders archscripts
	        2. ----$(Q)$(MAKE) $(build)=scripts build_unifdef
			3. 
			4. 
			5. PHONY += scripts_basic
			6. scripts_basic:
	 	    7. ----$(Q)$(MAKE) $(build)=scripts/basic
 		 	8. ----$(Q)rm -f .tmp_quiet_recordmcount
			6. 
			7. 
		 8. 
		 9. 
   8. 
   9. ||||||||||
   10. ifdef CONFIG_GDB_SCRIPTS
   11. ----$(Q)ln -fsn `cd $(srctree) && /bin/pwd`/scripts/gdb/vmlinux-gdb.py
   12. endif
   13. ||||||||||
   14. ifdef CONFIG_TRIM_UNUSED_KSYMS
   15. ----$(Q)$(CONFIG_SHELL) $(srctree)/scripts/adjust_autoksyms.sh \
   16. "$(MAKE) -f $(srctree)/Makefile vmlinux"
   17. endif
*** $(vmlinux-deps)
	第970行: vmlinux-deps := $(KBUILD_LDS) $(KBUILD_VMLINUX_INIT) $(KBUILD_VMLINUX_MAIN) $(KBUILD_VMLINUX_LIBS)
	第1009行: $(sort $(vmlinux-deps)): $(vmlinux-dirs) ;		
	
1. vmlinux-deps 第970行
   export KBUILD_LDS          := arch/$(SRCARCH)/kernel/vmlinux.lds	
   export KBUILD_VMLINUX_INIT := $(head-y) $(init-y)
   export KBUILD_VMLINUX_MAIN := $(core-y) $(libs-y2) $(drivers-y) $(net-y) $(virt-y)
   export KBUILD_VMLINUX_LIBS := $(libs-y1)
   --->vmlinux-deps := arch/$(SRCARCH)/kernel/vmlinux.lds $(head-y) $(init-y) $(core-y) $(libs-y2) $(drivers-y) $(net-y) $(virt-y) $(libs-y1)
   
2. vmlinux-dirs 第946行: 
   vmlinux-dirs := $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
   $(core-y) $(core-m) $(drivers-y) $(drivers-m)
   $(net-y) $(net-m) $(libs-y) $(libs-m) $(virt-y)))
   --->vmlinux-dirs := init usr drivers sound firmware net lib virt    (未定义:init-m core-m dirvers-m net-m libs-m)
   
   1. init-y
	  init-y := init/    (第564行)
	  init-y		:= $(patsubst %/, %/built-in.o, $(init-y))   (第953行)
	  ---> init-y := init/built-in.o
   2. init-m  未定义      (第946行)
   3. core-y
	  core-y		:= usr/
	  core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
	  core-y		:= $(patsubst %/, %/built-in.o, $(core-y))
	  ---> core-y := usr/built-in.o kernel/built-in.o certs/built-in.o mm/built-in.o         \
	  fs/built-in.o ipc/built-in.o security/built-in.o crypto/built-in.o block/built-in.o
   4. core-m  未定义
   5. drivers-y
	  drivers-y	:= drivers/ sound/ firmware/
	  drivers-y	:= $(patsubst %/, %/built-in.o, $(drivers-y))
	  ---> drivers-y := drivers/built-in.o sound/built-in.o firmware/built-in.o
   6. drivers-m  未定义
   7. net-y
	  net-y		:= net/
	  net-y		:= $(patsubst %/, %/built-in.o, $(net-y))
	  ---> net-y := net/built-in.o
   8. net-m  未定义
   9. libs-y
	  libs-y		:= lib/
	  libs-y1		:= $(patsubst %/, %/lib.a, $(libs-y))
	  libs-y2		:= $(filter-out %.a, $(patsubst %/, %/built-in.o, $(libs-y)))
	  ---> libs-y1  := lib/lib.a
      ---> libs-y2  := lib/built-in.o
   10. libs-m  未定义
   11. virt-y
	   virt-y		:= virt/
	   virt-y		:= $(patsubst %/, %/built-in.o, $(virt-y))	
	   ---> virt-y  := virt/built-in.o

3. $(vmlinux-dirs): prepare scripts   (第1018行)
   1. $(vmlinux-dirs): prepare scripts   (第1018行)
   2. ----$(Q)$(MAKE) $(build)=$@
   3. 
   4. ---> init usr drivers sound firmware net lib virt : prepare scripts
   5. --------$(Q)$(MAKE) $(build)=$@
   6. 
   7. prepare: prepare0 prepare-objtool
	  1. prepare0: archprepare gcc-plugins
	  2. ----$(Q)$(MAKE) $(build)=.
		 1. archprepare: archheaders archscripts prepare1 scripts_basic
		 2. 
		 3. include scripts/Makefile.gcc-plugins
	  3. 
	  4. prepare-objtool: $(objtool_target)
   8. 
   9. scripts:
	  1. scripts: scripts_basic include/config/auto.conf include/config/tristate.conf asm-generic gcc-plugins
	  2. ---$(Q)$(MAKE) $(build)=$(@)
	  3. 
	  4. scripts_basic:
	  5. ----$(Q)$(MAKE) $(build)=scripts/basic
	  6. ----$(Q)rm -f .tmp_quiet_recordmcount
	  7. 
	  8. -include include/config/auto.conf
	  9. 
	  10. include/config/auto.conf:
	  11. $(Q)test -e include/generated/autoconf.h -a -e $@ || (		\
	  12. echo >&2;
	  13. echo >&2 "  ERROR: Kernel configuration is invalid.";
	  14. echo >&2 "         include/generated/autoconf.h or $@ are
	  15. echo >&2 "         Run 'make oldconfig && make prepare' on kernel src to fix it.";
	  16. echo >&2 ;
	  17. /bin/false)
	  18. 
	  19. include/config/tristate.conf
	  20. 
	  21. asm-generic: uapi-asm-generic
	  22. $(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic  \
	  23. ----src=asm obj=arch/$(SRCARCH)/include/generated/asm
	  24. 
	  25. uapi-asm-generic:
	  26. ----$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic  \
	  27. src=uapi/asm obj=arch/$(SRCARCH)/include/generated/uapi/asm
	  28. 
   10. 

4. $(sort $(vmlinux-deps)): $(vmlinux-dirs)  第1009行
   1. 第1003行: ifdef CONFIG_SAMPLES
      vmlinux-dirs += samples
      endif
   2. arch/$(SRCARCH)/kernel/vmlinux.lds $(head-y) $(init-y) $(core-y) $(libs-y2) $(drivers-y) $(net-y) $(virt-y) $(libs-y1):  \
   3. init usr drivers sound firmware net lib virt    (未定义:init-m core-m dirvers-m net-m libs-m)
*** FORCE
   	PHONY += FORCE
   	FORCE:
   	.PHONY: $(PHONY)   
*** +$(call if_changed,link-vmlinux) 
3. call函数
   1. make 内置的一个特殊的函数,它可以引用用户自己定义的带有参数的函数
4. if_changed 变量
   1. kbuild 定义的一个变量, 定义在 scripts/Kbuild.include 路径下
   2. 变量原型:
      if_changed = $(if $(strip $(any-prereq) $(arg-check)),                   \
	  ----@set -e;                                                             \
	  ----$(echo-cmd) $(cmd_$(1));                                             \
	  ----printf '%s\n' 'cmd_$@ := $(make-cmd)' > $(dot-target).cmd, @:)
   3. 该代码段包含的知识点有: if函数, "命令"的执行原理, strip函数(详情参见blog-makefile)
   4. 重点: 该if函数中,没有给出第二个参数,所以,如果$(strip $(any-prereq) $(arg-check))的展开结果为空,则if_changed为空,否则,if_changed的值就是三个----开头的命令的计算结果
   5. any-prereq
      1. $(filter-out $(PHONY),$?) $(filter-out $(PHONY) $(wildcard $^),$^)
	  2. 作用: any-prereq检查是否有依赖比目标新，或者依赖还没有创建
   6. arg-check
      1. ifneq ($(KBUILD_NOCMDDEP),1)
	  2. arg-check = $(filter-out $(subst $(space),$(space_escape),$(strip $(cmd_$@))),$(subst $(space),$(space_escape),$(strip $(cmd_$1))))
      3. else
      4. arg-check = $(if $(strip $(cmd_$@)),,1)
      5. endif
	  6. 作用: 检查编译目标的命令相对上次是否发生变化
   7. 传给if_changed的第一个实参是link-vmlinux，因此，cmd_$(1)展开后为cmd_link-vmlinux
   8. 在"set -e"之后出现的代码，一旦出现了返回值为非零状态，整个脚本就会立即退出,这是出于保证代码安全性的考虑(命令返回0,说明运行正常)
   9. if_changed核心功能就是当目标的依赖或者编译命令发生变化时，执行表达式“cmd_$(1)”展开后的值
   10. 
5. +$(call if_changed,link-vmlinux)
Blog creation time:[2017-11-02 四 16:51]
** WAITTING [#D] Theme:编译kernel							  :@Blog:@Kernel:
1. 配置系统的基本结构:
   1. Makefile：分布在 Linux 内核源代码根目录及各层目录中，定义 Linux 内核的编译规则；
   2. 配置文件（config.in(2.4内核，2.6内核)）：给用户提供配置选择的功能；
   3. 配置工具：包括配置命令解释器（对配置脚本中使用的配置命令进行解释）和配置用户界面（提供基于字符界面、基于 Ncurses 图形界面以及基于 Xwindows 图形界面的用户配置界面，各自对应于 Make config、Make menuconfig 和 make xconfig）,些配置工具都是使用脚本语言，如 Tcl/TK、Perl 编写的（也包含一些用 C 编写的代码）。本文并不是对配置系统本身进行分析，而是介绍如何使用配置系统。所以，除非是配置系统的维护者，一般的内核开发者无须了解它们的原理，只需要知道如何编写 Makefile 和配置文件就可以

2. makefile menuconfig过程讲解:
   1. make menuconfig提示'make menuconfig' requires the ncurses libraries解决方法:sudo apt-get install libncurses5-dev
   2. 
   3. 
3. Linux内核的配置系统:
   1. 
Blog creation time:[2017-11-02 四 16:53]
